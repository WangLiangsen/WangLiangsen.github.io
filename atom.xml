<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>iScenery</title>
  <icon>https://www.gravatar.com/avatar/e771004f1b58aa385884f02568764d5e</icon>
  <subtitle>岁月漫长 要心地善良</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://WangLiangsen.github.io/"/>
  <updated>2019-03-19T16:30:58.161Z</updated>
  <id>http://WangLiangsen.github.io/</id>
  
  <author>
    <name>Scenery</name>
    <email>wangliangsen@outlook.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>A Countdown</title>
    <link href="http://WangLiangsen.github.io/2019/03/19/A%20Countdown/"/>
    <id>http://WangLiangsen.github.io/2019/03/19/A Countdown/</id>
    <published>2019-03-19T15:09:02.000Z</published>
    <updated>2019-03-19T16:30:58.161Z</updated>
    
    <content type="html"><![CDATA[<h1 id="A-Countdown"><a href="#A-Countdown" class="headerlink" title="A Countdown"></a>A Countdown</h1><blockquote><p align="right">2019年3月19日 —— 晴 —— 成都市</p></blockquote><p>今天签了人生第一份工作，坐标深圳软件园。  </p><p>坐在地铁上的时候心里挺空的，前途未卜的感觉。没有找到工作的时候，怕自己没有能力、没有运气、进不了大企业；有Offer之后，开始担心是否能立足、有多大提升。根源并非“不知满足”的心理，而是没有一个确信的规划。所以我突然认识到，<strong>最可怕的不是失败了多少次</strong>，<strong>而是不知道自己想要什么</strong>。   </p><p>最近好多事情也开始countdown，来不及详述，来不及感伤，甚至来不及写在博客里。  </p><p>路口就在不远处了，朋友的建议、家人的看法、自己的主张来回拉扯着。但愿我能在走到红绿灯之前弄清楚自己想要什么，不至于迷失于车水马龙吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;A-Countdown&quot;&gt;&lt;a href=&quot;#A-Countdown&quot; class=&quot;headerlink&quot; title=&quot;A Countdown&quot;&gt;&lt;/a&gt;A Countdown&lt;/h1&gt;&lt;blockquote&gt;
&lt;p align=&quot;right&quot;&gt;2019年3月
      
    
    </summary>
    
      <category term="日记" scheme="http://WangLiangsen.github.io/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="日记" scheme="http://WangLiangsen.github.io/tags/%E6%97%A5%E8%AE%B0/"/>
    
      <category term="心情" scheme="http://WangLiangsen.github.io/tags/%E5%BF%83%E6%83%85/"/>
    
  </entry>
  
  <entry>
    <title>5分钟入门MARKDOWN</title>
    <link href="http://WangLiangsen.github.io/2019/01/18/markdown%E8%AF%AD%E6%B3%95%E5%85%A5%E9%97%A8/"/>
    <id>http://WangLiangsen.github.io/2019/01/18/markdown语法入门/</id>
    <published>2019-01-17T16:16:16.954Z</published>
    <updated>2019-01-17T16:29:14.228Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是Markdown？"><a href="#什么是Markdown？" class="headerlink" title="什么是Markdown？"></a>什么是Markdown？</h1><p>Markdwon 是一种轻量级标记语言，由Aaron Swartz和John Gruber共同设计。它以纯文本形式（易读、易写、易更改）编写文档，并最终以HTLM格式发布。Markdown也可以理解为将以Markdown语法编写的语言转换成HTML内容的工具。</p><blockquote><p><strong>Aaron Swartz的传奇一生</strong></p><ul><li>14岁参与RSS 1.0规格标准制订。</li><li>2004年入读斯坦福大学，之后退学。</li><li>2005年创建 Infogami,之后与Reddit合并成为其合伙人。</li><li>2010年创立示进会（Demand Preogress）,积极参与禁止网络盗版法案（SOPA）活动，最终该提案被撤回。</li><li>2011年7月19日,因被控从MIT和JSTOR下载480万篇学术论文并以免费形式上传于网络被捕。</li><li>2013年1月自杀身亡。</li></ul></blockquote><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p>注意：Markdown使用 # + * &gt; _ 等符号来标记，符号后面必须跟上至少1个空格才会被语法识别。</p><h1 id="Markdown语法"><a href="#Markdown语法" class="headerlink" title="Markdown语法"></a>Markdown语法</h1><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>Markdown的标题用’# ‘标记<br>在想要作为标题的文字开头加上1~6个#，依次表示一级到六级标题<br>举例：<br># 一级标题<br>## 二级标题<br>### 三级标题  </p><blockquote><p>为了避免文字TOC出现混乱，本例不做输出演示。</p></blockquote><h2 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h2><p>在行尾添加两个空格（spacebar）加一个回车（enter）表示换行：</p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>列表分为 无序列表 和 有序列表</p><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>用 - + * 作为打头标记<br>举例：<br>+ 项目1<br>+ 项目2<br>+ 项目3<br>输出：</p><blockquote><ul><li>项目1</li><li>项目2</li><li>项目3</li></ul></blockquote><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>有序列表则使用数字加英文句点.来表示<br>举例:<br>1. 第一项<br>2. 第二项<br>3. 第三项<br>输出：</p><blockquote><ol><li>第一项</li><li>第二项</li><li>第三项</li></ol></blockquote><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>引用以 &gt; 来表示，引用中又支持多级引用、标题、列表、代码块、分割线等常规语法。（也就是说：引用里面可以加标题，列表，嵌套引用等等。）<br>举例：<br>> 引用自百度文库<br>>&gt; 引用自网易云音乐<br>输出：</p><blockquote><p>引用自百度文库</p><blockquote><p>引用自网易云音乐</p></blockquote></blockquote><h2 id="文字样式（字体）"><a href="#文字样式（字体）" class="headerlink" title="文字样式（字体）"></a>文字样式（字体）</h2><p>*斜体文本*</p><p>**加粗文本**</p><p>*<strong>斜粗体文本*</strong></p><p>\<del>删除文本</del></p><p>` 底纹 `</p><p>&lt; sub&gt;下标文字&lt; /sub&gt;</p><p>&lt; sup&gt;上标文字&lt; /sup&gt;</p><p>&lt; u&gt;下划线文本&lt; /u&gt;</p><p>输出：</p><blockquote><p><em>斜体文本</em></p><p><strong>加粗文本</strong></p><p><strong><em>斜粗体文本</em></strong></p><p><del>删除文本</del></p><p><code>底纹</code></p><p><sub>下标文字</sub>  正常文字</p><p><sup>上标文字</sup>  正常文字</p><p><u>下划线文本</u></p></blockquote><h2 id="图片与链接"><a href="#图片与链接" class="headerlink" title="图片与链接"></a>图片与链接</h2><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>链接的形式: 内联 和 引用。这两种形式下链接文本的定界符都是 [中括号].<br>要创建内联链接, 只需在链接文本的右括号后面紧接一对圆括号. 圆括号里面放所需的 URL 链接, 还可以放一个 可选 的链接标题, 标题要用引号包围. </p><p>自动链接：直接使用\&lt; &gt;括起来 &lt;yourlink.xyz&gt;</p><p>链接： [ ]( ) [链接描述](链接的地址)</p><p>举例：</p><p>This is [an example](<a href="http://example.com/" target="_blank" rel="noopener">http://example.com/</a> “Title”) inline link.</p><p>This is an example \<a href="http://example.com" target="_blank" rel="noopener">http://example.com</a></p><p>输出：</p><blockquote><p>This is <a href="http://example.com/" title="Title" target="_blank" rel="noopener">an example</a> inline link.</p><p>This is an example <a href="http://example.com" target="_blank" rel="noopener">http://example.com</a></p></blockquote><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>Markdown 使用了类似链接的语法来插入图片<br>在链接的语法前面加一个感叹号: !<br>也就是:</p><p>图片：![Alt text] (/path/to/img.jpg “Optional title”)</p><p>由于没有本地路径，此例子不做举例输出演示。</p><h2 id="代码和代码块"><a href="#代码和代码块" class="headerlink" title="代码和代码块"></a>代码和代码块</h2><h3 id="代码行"><a href="#代码行" class="headerlink" title="代码行"></a>代码行</h3><p>引用的代码只有一行，可以用 ` 号将语句包起来。<br>举例：</p><p>`cout &lt;&lt; “Hello world” //this is an example of C++ outputing hello word`</p><p>输出：</p><blockquote><p><code>cout &lt;&lt; &quot;Hello world&quot; //this is an example of C++ outputing hello word</code></p></blockquote><h3 id="代码块（段）"><a href="#代码块（段）" class="headerlink" title="代码块（段）"></a>代码块（段）</h3><p>用一对\<figure class="highlight plain"><figcaption><span>将代码括起来，在第一个\`\`\`之后，空格输入语言名称即可高亮代码。  </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">格式如下：</span><br><span class="line"></span><br><span class="line">\``` [语言]</span><br><span class="line"></span><br><span class="line">这里是代码​</span><br><span class="line"></span><br><span class="line">\</span><br></pre></td></tr></table></figure></p><p>举例：</p><p>``` C++</p><p>#include<iostream><br>int main()<br>{<br>    using namespace std;<br>    int x = 1;<br>    x = x++; //x = x + 1<br>    cout &lt;&lt; x;<br>    return 0;<br>}</iostream></p><p>```</p><p>输出：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">1</span>;</span><br><span class="line">    x = x++; <span class="comment">//x = x + 1</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; x;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><p>在一行中使用三个或三个以上的 * 可以添加分隔线，中间可以插入空格，但是不能有其他字符。</p><p>举例：</p><p>***</p><p>输出：</p><blockquote><hr></blockquote><h2 id="高级应用"><a href="#高级应用" class="headerlink" title="高级应用"></a>高级应用</h2><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>表格用竖线|分割不同列，用以下标记设置对齐方式 (ATTENTION！必须) ：<br>居左:—-    居中:—-:    居右—-:</p><p>举例：</p><p>|标题1|标题2|标题3|</p><p>|:—|:—:|—:|</p><p>|居左文本|居中文本|居右文本|</p><p>输出：</p><blockquote><table><thead><tr><th style="text-align:left">标题1</th><th style="text-align:center">标题2</th><th style="text-align:right">标题3</th></tr></thead><tbody><tr><td style="text-align:left">居左文本</td><td style="text-align:center">居中文本</td><td style="text-align:right">居右文本</td></tr></tbody></table></blockquote><h3 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h3><p>使用[^number ]来定义脚注</p><p>举例：</p><p>这是一个脚注的例子[^ 1]</p><p>[^1 ]: 这里是脚注</p><p>输出：</p><blockquote><p>这是一个脚注的例子[^1]</p></blockquote><blockquote></blockquote><h3 id="常用弥补Markdown的Html标签"><a href="#常用弥补Markdown的Html标签" class="headerlink" title="常用弥补Markdown的Html标签"></a>常用弥补Markdown的Html标签</h3><h4 id="字体大小和颜色"><a href="#字体大小和颜色" class="headerlink" title="字体大小和颜色"></a>字体大小和颜色</h4><p>\&lt; font face=”微软雅黑” color=”red” size=”6”&gt;字体及字体颜色和大小<br>\&lt; /font&gt;<br>\&lt; font color=”#0000ff”&gt;字体颜色&lt;/ font&gt;</p><font face="微软雅黑" color="red" size="6">字体及字体颜色和大小</font><br><font color="#0000ff">字体颜色</font><h4 id="文本对齐方式"><a href="#文本对齐方式" class="headerlink" title="文本对齐方式"></a>文本对齐方式</h4><p>&lt; p align=”left”&gt;居左文本&lt; /p&gt;<br>&lt; p align=”center”&gt;居中文本&lt; /p&gt;<br>&lt; p align=”right”&gt;居右文本&lt; /p&gt;</p><p align="left">居左文本</p><br><p align="center">居中文本</p><br><p align="right">居右文本</p><h4 id="任务列表"><a href="#任务列表" class="headerlink" title="任务列表"></a>任务列表</h4><p>任务列表支持Markdown的字体格式，支持链接，支持有序和无序列表。<br>用- [ ]表示未完成<br>用- [x]表示完成</p><p>举例：</p><p>- [ ] <a href="">links</a>, <strong>formatting</strong>, and <del>tags</del> supported<br>- [x] list syntax required (any unordered or ordered list   supported)<br>- [ ] this is a complete item<br>- [x] this is an incomplete item  </p><p>输出：</p><blockquote><ul><li style="list-style: none"><input type="checkbox"> <a href="">links</a>, <strong>formatting</strong>, and <del>tags</del> supported  </li><li style="list-style: none"><input type="checkbox" checked> list syntax required (any unordered or ordered list   supported)  </li><li style="list-style: none"><input type="checkbox"> this is a complete item  </li><li style="list-style: none"><input type="checkbox" checked> this is an incomplete item  </li></ul></blockquote><h4 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h4><p>转义字符就是想显示出Markdown语法内的标记字符，比如* _ - + 等。<br>这篇教程在举例部分，为了显示语法就用了很多转义字符。</p><p>转义字符用 \ 作为符号的前缀</p><h1 id="在Visual-Studio-Code中编辑Markdown"><a href="#在Visual-Studio-Code中编辑Markdown" class="headerlink" title="在Visual Studio Code中编辑Markdown"></a>在Visual Studio Code中编辑Markdown</h1><p>在扩展中心（ctrl+shift+x）安装Markdown all in one插件就能很方便的编辑和预览Markdown文件。<br>快捷键如下：</p><table><thead><tr><th style="text-align:left">Key</th><th style="text-align:left">Command</th></tr></thead><tbody><tr><td style="text-align:left">Ctrl + B</td><td style="text-align:left">加粗</td></tr><tr><td style="text-align:left">Ctrl + I</td><td style="text-align:left">斜体</td></tr><tr><td style="text-align:left">Alt + S</td><td style="text-align:left">删除线</td></tr><tr><td style="text-align:left">Ctrl + Shift + ]</td><td style="text-align:left">标题 从一级到六级递增</td></tr><tr><td style="text-align:left">Ctrl + Shift + [</td><td style="text-align:left">标题 从当前级到一级递减</td></tr><tr><td style="text-align:left">Ctrl + M</td><td style="text-align:left">数学公式环境</td></tr><tr><td style="text-align:left">Alt + C</td><td style="text-align:left">Check/Uncheck task list item</td></tr><tr><td style="text-align:left">Ctrl + Shift + V</td><td style="text-align:left">Markdown预览</td></tr><tr><td style="text-align:left">Ctrl + K V</td><td style="text-align:left">Toggle preview to side</td></tr></tbody></table><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p>本教程参考的文档如下：</p><blockquote><p><a href="https://markdown-zh.readthedocs.io/en/latest/" target="_blank" rel="noopener">https://markdown-zh.readthedocs.io/en/latest/</a><br><a href="http://www.cycygogo.cn/2017/12/05/Markdown-Syntax/" target="_blank" rel="noopener">http://www.cycygogo.cn/2017/12/05/Markdown-Syntax/</a><br><a href="https://www.jianshu.com/p/ccfd81fe77d2" target="_blank" rel="noopener">https://www.jianshu.com/p/ccfd81fe77d2</a></p></blockquote><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><blockquote><p>此Markdown教程尽可能简单的讲解了Markdown的语法，在字体及列表中，除了*<br>仍有很多其他标识符可以使用。本文只介绍了其中一种。</p></blockquote><blockquote><p>除了入门Markdown，本文也可留作日后语法备查。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;什么是Markdown？&quot;&gt;&lt;a href=&quot;#什么是Markdown？&quot; class=&quot;headerlink&quot; title=&quot;什么是Markdown？&quot;&gt;&lt;/a&gt;什么是Markdown？&lt;/h1&gt;&lt;p&gt;Markdwon 是一种轻量级标记语言，由Aaron Swa
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://WangLiangsen.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Markdown" scheme="http://WangLiangsen.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Markdown/"/>
    
    
      <category term="入门教程" scheme="http://WangLiangsen.github.io/tags/%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
    
      <category term="Markdown" scheme="http://WangLiangsen.github.io/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>C++入门教程01</title>
    <link href="http://WangLiangsen.github.io/2019/01/05/C++%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B001/"/>
    <id>http://WangLiangsen.github.io/2019/01/05/C++学习笔记01/</id>
    <published>2019-01-05T07:10:02.000Z</published>
    <updated>2019-03-19T15:12:09.226Z</updated>
    
    <content type="html"><![CDATA[<h1 id="开始学习C"><a href="#开始学习C" class="headerlink" title="开始学习C++"></a>开始学习C++</h1><h2 id="关于C-的源文件"><a href="#关于C-的源文件" class="headerlink" title="关于C++的源文件"></a>关于C++的源文件</h2><p>C++的源代码(Source Code)文件扩展名为.C 或者.cpp</p><h2 id="Windows上的编译器"><a href="#Windows上的编译器" class="headerlink" title="Windows上的编译器"></a>Windows上的编译器</h2><p><em>Compile</em> 对打开文件中的代码进行编译</p><p><em>Build</em> 和  <em>Make</em> 编译项目中所有源代码文件，如果只有一个被修改则只编译一个</p><p><em>Build All</em> 重新编译所有源代码文件的代码</p><p><em>Link</em> 组合源代码和库代码</p><p><em>Run</em> 或 <em>Execute</em> 运行程序（自动完成上述步骤）</p><p><em>Debug/Release</em> 以步进方式运行程序 <em>Debug</em> 中带有调试信息，程序较大，执行较慢</p><blockquote><p>在Visual Studio上运行程序时，通常要加入cin.get(); 或者两句cin.get(); cin.get();</p></blockquote><blockquote><p>目的是防止程序输出窗口一闪而过</p></blockquote><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><blockquote><p>可以对示例程序使用同一个项目，只在项目里增删源文件，可以节省空间和工作量</p></blockquote><blockquote><p>改正错误时应该首先改正第一个错误；如果在标识行上找不到错误，往往在上一行</p></blockquote><h2 id="C-基础语法"><a href="#C-基础语法" class="headerlink" title="C++基础语法"></a>C++基础语法</h2><ol><li><p>C++用 ; (分号)来区分语句结尾。</p></li><li><p>// 表示注释 也可以用/<em>     </em>/</p></li><li><p>#include 表示预处理编译指令，如： #include&lt;iostream&gt;</p></li><li><p>int main() 表示主函数头。</p></li><li><p>using namespace 表示使用什么名字空间，如：using namespace std;</p></li><li><p>{      }表示函数体，在花括号之间。</p></li><li><p>int型的main函数需要 return 一个整形的数作为返回值，通常为return 0;</p></li></ol><h2 id="cin-和-cout"><a href="#cin-和-cout" class="headerlink" title="cin 和 cout"></a>cin 和 cout</h2><p>cin 和 cout 在名字空间std内，分别用来输入和输出变量值/字符串</p><p>cin_ _用来输入字符。cin &gt;&gt; number 表示信息从cin流向number变量。</p><p>cout &lt;&lt; “a = ”&lt;&lt; a &lt;&lt; endl; 表示字符串和变量值流向cout。 输出为a=1(换行)</p><blockquote><p>如果没有using namespace std; 就需要std::cout 或 using std::cout;</p></blockquote><h2 id="声明、赋值以及函数的概念"><a href="#声明、赋值以及函数的概念" class="headerlink" title="声明、赋值以及函数的概念"></a>声明、赋值以及函数的概念</h2><h3 id="声明语句"><a href="#声明语句" class="headerlink" title="声明语句"></a>声明语句</h3><p>int number = 8；<em>//声明整形变量number同时初始化为8</em></p><blockquote><p>C++通常在首次使用变量前才做声明；而C则是在函数体的开始部位声明所需变量。</p></blockquote><h3 id="赋值语句"><a href="#赋值语句" class="headerlink" title="赋值语句"></a>赋值语句</h3><p>number = 25;_ //把25赋值给number变量。_</p><blockquote><p>如果出现传递等号的赋值，如a = b = c = 1; 是从右向左依次赋值</p></blockquote><h3 id="函数的概念"><a href="#函数的概念" class="headerlink" title="函数的概念"></a>函数的概念</h3><ol><li><p>x = sqrt(6.25);_ //变量 &lt;&lt;函数返回值 = 函数名（参数列表）_</p><p> 有些函数不只一个参数，有些函数没有参数甚至没有返回值。</p></li><li><p>使用库函数前要包含相应库文件，如：#include&lt;cmath&gt;</p><p> 使用用户自定义函数前要对函数原型进行声明，如：int func(int)；</p></li><li><p>Main()函数的返回值传递给操作系统，也叫退出值。通常0表示程序运行成功，非零则表示存在问题。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;开始学习C&quot;&gt;&lt;a href=&quot;#开始学习C&quot; class=&quot;headerlink&quot; title=&quot;开始学习C++&quot;&gt;&lt;/a&gt;开始学习C++&lt;/h1&gt;&lt;h2 id=&quot;关于C-的源文件&quot;&gt;&lt;a href=&quot;#关于C-的源文件&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://WangLiangsen.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="C++学习笔记" scheme="http://WangLiangsen.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/C-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="C++" scheme="http://WangLiangsen.github.io/tags/C/"/>
    
      <category term="入门教程" scheme="http://WangLiangsen.github.io/tags/%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
</feed>
