<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>iScenery</title>
  <icon>https://www.gravatar.com/avatar/e771004f1b58aa385884f02568764d5e</icon>
  <subtitle>岁月漫长 要心地善良</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://WangLiangsen.github.io/"/>
  <updated>2019-03-19T17:14:09.772Z</updated>
  <id>http://WangLiangsen.github.io/</id>
  
  <author>
    <name>Scenery</name>
    <email>wangliangsen@outlook.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python 3 入门教程02</title>
    <link href="http://WangLiangsen.github.io/2019/03/20/python%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B02/"/>
    <id>http://WangLiangsen.github.io/2019/03/20/python入门教程02/</id>
    <published>2019-03-19T17:13:55.000Z</published>
    <updated>2019-03-19T17:14:09.772Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python的基本数据类型"><a href="#Python的基本数据类型" class="headerlink" title="Python的基本数据类型"></a>Python的基本数据类型</h1><ol><li><p>整数  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">   <span class="number">1</span>，<span class="number">100</span>，<span class="number">-8080</span>，<span class="number">0</span>，</span><br><span class="line">   ```  </span><br><span class="line">   &gt; 十六进制整数 `<span class="number">0xff00</span>，<span class="number">0xa5b4c3d2</span>`</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 浮点数</span><br><span class="line">   ``` Python</span><br><span class="line">   <span class="number">1.23</span>，<span class="number">3.14</span>，<span class="number">-9.01</span> <span class="number">1.23e9</span> <span class="number">12.3e8</span> <span class="number">1.2e-5</span></span><br></pre></td></tr></table></figure></li><li><p>字符串<br>字符串是以单引号<code>&#39;</code>或双引号<code>&quot;</code>括起来的任意文本，比如<code>&#39;abc&#39;</code>，<code>&quot;xyz&quot;</code>  </p><blockquote><ul><li>字符串内部既包含<code>&#39;</code>又包含<code>&quot;</code>可以用转义字符<code>\</code>来标识<br><code>&#39;I\&#39;m \&quot;OK\&quot;!&#39;</code>  </li><li>转义字符\可以转义很多字符，比如<code>\n</code>表示换行，<code>\t</code>表示制表符，字符\本身也要转义，所以<code>\\</code>表示的字符就是\</li></ul></blockquote></li><li>布尔值<br>布尔值只有<code>True</code>、<code>False</code>两种值(注意大小写)</li><li>空值<br>空值是Python里一个特殊的值，用<code>None</code>表示。<code>None</code>不能理解为0，因为0是有意义的，而<code>None</code>是一个特殊的空值。</li></ol><h1 id="Python的变量"><a href="#Python的变量" class="headerlink" title="Python的变量"></a>Python的变量</h1><p>变量名必须是大小写英文、数字和<code>_</code>的组合，且不能用数字开头<br>在Python中，等号<code>=</code>是赋值语句，可以把任意数据类型赋值给变量，同一个变量可以反复赋值，而且可以是不同类型的变量<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">123</span> <span class="comment"># a是整数</span></span><br><span class="line">print(a)</span><br><span class="line">a = <span class="string">'ABC'</span> <span class="comment"># a变为字符串</span></span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure></p><blockquote><p>变量本身类型不固定的语言称之为动态语言，与之对应的是静态语言。<br>静态语言在定义变量时必须指定变量类型 (如 C 或 C++)</p></blockquote><h1 id="Python的常量"><a href="#Python的常量" class="headerlink" title="Python的常量"></a>Python的常量</h1><p>在Python中，通常用全部大写的变量名表示常量：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PI = <span class="number">3.14159265359</span> <span class="comment"># PI是一个常量</span></span><br></pre></td></tr></table></figure></p><h1 id="Python的字符串编码"><a href="#Python的字符串编码" class="headerlink" title="Python的字符串编码"></a>Python的字符串编码</h1><p>在Python 3版本中，字符串是以Unicode编码的，也就是说，Python的字符串支持多语言<br>对于单个字符的编码，Python提供了<code>ord()</code>函数获取字符的整数表示，<code>chr()</code>函数把编码转换为对应的字符：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span>&gt;&gt; ord('A')</span><br><span class="line">65</span><br><span class="line"><span class="meta">&gt;</span>&gt;&gt; ord('中')</span><br><span class="line">20013</span><br><span class="line"><span class="meta">&gt;</span>&gt;&gt; chr(66)</span><br><span class="line">'B'</span><br><span class="line"><span class="meta">&gt;</span>&gt;&gt; chr(25991)</span><br><span class="line">'文'</span><br><span class="line">```  </span><br><span class="line">以Unicode表示的str通过`encode()`方法可以编码为指定的bytes，例如：</span><br><span class="line">``` shell</span><br><span class="line"><span class="meta">&gt;</span>&gt;&gt; 'ABC'.encode('ascii')</span><br><span class="line">b'ABC'</span><br><span class="line"><span class="meta">&gt;</span>&gt;&gt; '中文'.encode('utf-8')</span><br><span class="line">b'\xe4\xb8\xad\xe6\x96\x87'</span><br><span class="line"><span class="meta">&gt;</span>&gt;&gt; '中文'.encode('ascii')</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File "&lt;stdin&gt;", line 1, in &lt;module&gt;</span><br><span class="line">UnicodeEncodeError: 'ascii' codec can't encode characters in position 0-1: ordinal not in range(128)</span><br><span class="line">```  </span><br><span class="line">反过来，如果我们从网络或磁盘上读取了字节流，那么读到的数据就是bytes。要把bytes变为str，就需要用`decode()`方法：</span><br><span class="line">``` shell</span><br><span class="line"><span class="meta">&gt;</span>&gt;&gt; b'ABC'.decode('ascii')</span><br><span class="line">'ABC'</span><br><span class="line"><span class="meta">&gt;</span>&gt;&gt; b'\xe4\xb8\xad\xe6\x96\x87'.decode('utf-8')</span><br><span class="line">'中文'</span><br><span class="line">```  </span><br><span class="line">要计算str包含多少个字符，可以用`len()`函数：</span><br><span class="line">``` shell</span><br><span class="line"><span class="meta">&gt;</span>&gt;&gt; len('ABC')</span><br><span class="line">3</span><br><span class="line"><span class="meta">&gt;</span>&gt;&gt; len('中文')</span><br><span class="line">2</span><br><span class="line">```  </span><br><span class="line">len()函数计算的是str的字符数，如果换成bytes，`len()`函数就计算字节数：</span><br><span class="line">``` shell</span><br><span class="line"><span class="meta">&gt;</span>&gt;&gt; len(b'ABC')</span><br><span class="line">3</span><br><span class="line"><span class="meta">&gt;</span>&gt;&gt; len(b'\xe4\xb8\xad\xe6\x96\x87')</span><br><span class="line">6</span><br><span class="line"><span class="meta">&gt;</span>&gt;&gt; len('中文'.encode('utf-8'))</span><br><span class="line">6</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 格式化</span><br><span class="line">在Python中，采用的格式化方式和C语言是一致的，用%实现，举例如下：</span><br><span class="line">``` shell</span><br><span class="line"><span class="meta">&gt;</span>&gt;&gt; 'Hello, %s' % 'world'</span><br><span class="line">'Hello, world'</span><br><span class="line"><span class="meta">&gt;</span>&gt;&gt; 'Hi, %s, you have $%d.' % ('Michael', 1000000)</span><br><span class="line">'Hi, Michael, you have $1000000.'</span><br></pre></td></tr></table></figure></p><p><code>%</code>运算符就是用来格式化字符串的。在字符串内部，<code>%s</code>表示用字符串替换，<code>%d</code>表示用整数替换<br>|占位符|替换内容|<br>|:-|-:|<br>|%d|整数|<br>|%f|浮点数|<br>|%s|字符串|<br>|%x|十六进制整数|</p><h1 id="list和tuple"><a href="#list和tuple" class="headerlink" title="list和tuple"></a>list和tuple</h1><h2 id="列表list"><a href="#列表list" class="headerlink" title="列表list"></a>列表list</h2><h3 id="什么是list"><a href="#什么是list" class="headerlink" title="什么是list"></a>什么是list</h3><p>list是一种有序的集合，可以随时添加和删除其中的元素<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span>&gt;&gt; classmates = ['Michael', 'Bob', 'Tracy']</span><br><span class="line"><span class="meta">&gt;</span>&gt;&gt; classmates</span><br><span class="line">['Michael', 'Bob', 'Tracy']</span><br></pre></td></tr></table></figure></p><p>变量classmates就是一个list。用len()函数可以获得list元素的个数：(此例子中是3)  </p><p>用索引来访问list中每一个位置的元素，记得索引是从0开始的<br>当索引超出了范围时，Python会报一个IndexError错误，所以，要确保索引不要越界<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span>&gt;&gt; classmates[0]</span><br><span class="line">'Michael'</span><br><span class="line"><span class="meta">&gt;</span>&gt;&gt; classmates[2]</span><br><span class="line">'Tracy'</span><br><span class="line"><span class="meta">&gt;</span>&gt;&gt; classmates[3]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File "&lt;stdin&gt;", line 1, in &lt;module&gt;</span><br><span class="line">IndexError: list index out of range</span><br></pre></td></tr></table></figure></p><blockquote><p>如果要取最后一个元素，除了计算索引位置外，还可以用-1做索引，直接获取最后一个元素<br>以此类推，可以获取倒数第2个、倒数第3个(-2  -3)  </p></blockquote><h3 id="list的常见操作"><a href="#list的常见操作" class="headerlink" title="list的常见操作"></a>list的常见操作</h3><ol><li><p>list中追加元素到末尾</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span>&gt;&gt; classmates.append('Adam')</span><br><span class="line"><span class="meta">&gt;</span>&gt;&gt; classmates</span><br><span class="line">['Michael', 'Bob', 'Tracy', 'Adam']</span><br></pre></td></tr></table></figure></li><li><p>把元素插入到指定的位置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; classmates.insert(1, &apos;Jack&apos;)</span><br><span class="line">&gt;&gt;&gt; classmates</span><br><span class="line">[&apos;Michael&apos;, &apos;Jack&apos;, &apos;Bob&apos;, &apos;Tracy&apos;, &apos;Adam&apos;]</span><br></pre></td></tr></table></figure></li><li><p>要删除list末尾的元素</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span>&gt;&gt; classmates.pop()</span><br><span class="line">'Adam'</span><br><span class="line"><span class="meta">&gt;</span>&gt;&gt; classmates</span><br><span class="line">['Michael', 'Jack', 'Bob', 'Tracy']</span><br></pre></td></tr></table></figure></li><li><p>删除指定位置的元素</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span>&gt;&gt; classmates.pop(1)</span><br><span class="line">'Jack'</span><br><span class="line"><span class="meta">&gt;</span>&gt;&gt; classmates</span><br><span class="line">['Michael', 'Bob', 'Tracy']</span><br></pre></td></tr></table></figure></li><li><p>把某个元素替换成别的元素</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span>&gt;&gt; classmates[1] = 'Sarah'</span><br><span class="line"><span class="meta">&gt;</span>&gt;&gt; classmates</span><br><span class="line">['Michael', 'Sarah', 'Tracy']</span><br><span class="line">```  </span><br><span class="line"><span class="meta">#</span>## list的其他用法</span><br><span class="line">1. list里面的元素的数据类型也可以不同：</span><br><span class="line">``` shell</span><br><span class="line"><span class="meta">&gt;</span>&gt;&gt; L = ['Apple', 123, True]</span><br></pre></td></tr></table></figure></li><li><p>list元素也可以是另一个list：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span>&gt;&gt; s = ['Python', 'java', ['asp', 'php'], 'scheme']</span><br><span class="line"><span class="meta">&gt;</span>&gt;&gt; len(s)</span><br><span class="line">4</span><br><span class="line">```  </span><br><span class="line">3. 如果一个list中一个元素也没有，就是一个空的list，它的长度为0：</span><br><span class="line">```  shell</span><br><span class="line"><span class="meta">&gt;</span>&gt;&gt; L = []</span><br><span class="line"><span class="meta">&gt;</span>&gt;&gt; len(L)</span><br><span class="line">0</span><br></pre></td></tr></table></figure></li></ol><h2 id="元组tuple"><a href="#元组tuple" class="headerlink" title="元组tuple"></a>元组tuple</h2><p>tuple和list非常类似，但是tuple一旦初始化就不能修改<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span>&gt;&gt; classmates = ('Michael', 'Bob', 'Tracy')</span><br></pre></td></tr></table></figure></p><p>现在，classmates这个tuple不能变了，它也没有append()，insert()这样的方法。其他获取元素的方法和list是一样的，你可以正常地使用classmates[0]，classmates[-1]，但不能赋值成另外的元素。  </p><blockquote><p>tuple不可变，所以代码更安全。如果可能，能用tuple代替list就尽量用tuple  </p><ul><li>如果要定义一个空的tuple，可以写成()：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span>&gt;&gt; t = ()</span><br><span class="line"><span class="meta">&gt;</span>&gt;&gt; t</span><br><span class="line">()</span><br></pre></td></tr></table></figure></li></ul></blockquote><ul><li>只有1个元素的tuple定义时必须加一个逗号<code>,</code>，来消除歧义：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span>&gt;&gt; t = (1,)</span><br><span class="line"><span class="meta">&gt;</span>&gt;&gt; t</span><br><span class="line">(1,)</span><br></pre></td></tr></table></figure></li></ul><p>Python在显示只有1个元素的tuple时，也会加一个逗号,，以免被误解成数学计算意义上的括号  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python的基本数据类型&quot;&gt;&lt;a href=&quot;#Python的基本数据类型&quot; class=&quot;headerlink&quot; title=&quot;Python的基本数据类型&quot;&gt;&lt;/a&gt;Python的基本数据类型&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;整数  &lt;/p&gt;
&lt;figure 
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://WangLiangsen.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Pyhton3" scheme="http://WangLiangsen.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Pyhton3/"/>
    
    
      <category term="入门教程" scheme="http://WangLiangsen.github.io/tags/%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
    
      <category term="Python3" scheme="http://WangLiangsen.github.io/tags/Python3/"/>
    
  </entry>
  
  <entry>
    <title>Python 3 入门教程01</title>
    <link href="http://WangLiangsen.github.io/2019/03/20/python%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B01/"/>
    <id>http://WangLiangsen.github.io/2019/03/20/python入门教程01/</id>
    <published>2019-03-19T16:18:59.000Z</published>
    <updated>2019-03-19T17:13:28.799Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Pyhton-简介"><a href="#Pyhton-简介" class="headerlink" title="Pyhton 简介"></a>Pyhton 简介</h1><h2 id="Python的诞生和发展"><a href="#Python的诞生和发展" class="headerlink" title="Python的诞生和发展"></a>Python的诞生和发展</h2><ul><li>Python是荷兰著名计算机程序员Guido van Rossum在1989年圣诞节期间，为了打发无聊的圣诞节而编写的一个编程语言。  </li><li>Python就为我们提供了非常完善的基础代码库，覆盖了网络、文件、GUI、数据库、文本等大量内容，被形象地称作“内置电池（batteries included）”。用Python开发，许多功能不必从零编写，直接使用现成的即可。  </li><li>除了内置的库外，Python还有大量的第三方库，也就是别人开发的，供你直接使用的东西。当然，如果你开发的代码通过很好的封装，也可以作为第三方库给别人使用。  </li><li>许多大型网站就是用Python开发的，例如YouTube、Instagram，还有国内的豆瓣。很多大公司，包括Google、Yahoo等，甚至NASA（美国航空航天局）都大量地使用Python。</li></ul><h2 id="Python的优缺点"><a href="#Python的优缺点" class="headerlink" title="Python的优缺点"></a>Python的优缺点</h2><ul><li>+适合开发网络应用，包括网站、后台服务、系统管理员需要的脚本任务</li><li>-运行速度慢，因为Python是解释型语言</li><li>-代码不能加密。如果要发布你的Python程序，实际上就是发布源代码</li></ul><h2 id="Python的安装"><a href="#Python的安装" class="headerlink" title="Python的安装"></a>Python的安装</h2><p>Python是跨平台的，它可以运行在Windows、Mac和各种Linux/Unix系统上。在Windows上写Python程序，放到Linux上也能够运行<br>目前，Python有两个版本，一个是2.x版，一个是3.x版，这两个版本是不兼容的。但3.x版越来越普及。</p><ul><li>从Python的官方网站下载Python 3.7对应的64位安装程序或32位安装程序<br><a href="https://www.Python.org/downloads/" target="_blank" rel="noopener">https://www.Python.org/downloads/</a></li><li>特别注意安装时勾选<code>Add Python 3.7 to PATH</code></li><li>Windows + R，输入Python，如果出现 <code>&gt;&gt;&gt;</code> 表示Python安装成功<blockquote><p>Python解释器<br>当我们编写Python代码时，我们得到的是一个包含Python代码的以<code>.py</code>为扩展名的文本文件。要运行代码，就需要Python解释器去执行.py文件。<br>常见的各种Python解释器：</p><ul><li>CPython<br>当我们从Python官方网站下载并安装好Python 3.x后，我们就直接获得了一个官方版本的解释器：CPython。这个解释器是用C语言开发的，所以叫CPython  </li><li>IPython<br>IPython只是在交互方式上有所增强，但是执行Python代码的功能和CPython是完全一样的<br>CPython用<code>&gt;&gt;&gt;</code>作为提示符，而IPython用<code>In [序号]:</code>作为提示符。  </li><li>PyPy<br>PyPy采用JIT技术，对Python代码进行动态编译（注意不是解释），所以可以显著提高Python代码的执行速度。  </li><li>Jython<br>Jython是运行在Java平台上的Python解释器，可以直接把Python代码编译成Java字节码执行  </li><li>IronPython<br>IronPython和Jython类似，只不过IronPython是运行在微软.Net平台上的Python解释器，可以直接把Python代码编译成.Net的字节码。</li></ul></blockquote></li></ul><h2 id="交互模式和命令行模式"><a href="#交互模式和命令行模式" class="headerlink" title="交互模式和命令行模式"></a>交互模式和命令行模式</h2><p>在命令行模式下，可以执行Python进入Python交互式环境，也可以执行Python hello.py运行一个.py文件。<br>下面是一个命令行模式和交互模式转换的例子<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">C:\&gt;Python</span><br><span class="line">Python 3.7.2 (tags/v3.7.2:9a3ffc0492, Dec 23 2018, 23:09:28) [MSC v.1916 64 bit (AMD64)] on win32</span><br><span class="line">Type "help", "copyright", "credits" or "license" for more information.</span><br><span class="line"><span class="meta">&gt;</span>&gt;&gt; exit()</span><br></pre></td></tr></table></figure></p><p>Python交互模式的代码是输入一行，执行一行，而命令行模式下直接运行.py文件是一次性执行该文件内的所有代码。可见，Python交互模式主要是为了调试Python代码用的，也便于初学者学习，它不是正式运行Python代码的环境！</p><h2 id="编写第一个Python程序"><a href="#编写第一个Python程序" class="headerlink" title="编写第一个Python程序"></a>编写第一个Python程序</h2><p>windows下打开IDLE –&gt; file –&gt; new file<br>在新窗口中输入<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'hello world!'</span>)</span><br><span class="line">```  </span><br><span class="line">保存后，按`F5`执行，此时原来的命令行窗口会显示</span><br><span class="line">``` Python</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line">================== RESTART: C:\Users\scenery\Desktop\hello.py ==================</span><br><span class="line">hello world!</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></p><blockquote><p>用Python开发程序，完全可以一边在文本编辑器里写代码，一边开一个交互式命令窗口，在写代码的过程中，把部分代码粘到命令行去验证，事半功倍！</p></blockquote><h2 id="Python编程基础"><a href="#Python编程基础" class="headerlink" title="Python编程基础"></a>Python编程基础</h2><ul><li>Python的代码采用缩进方式</li><li>以<code>#</code>开头的语句是注释</li><li>以冒号<code>:</code>结尾的语句，视为缩进代码块</li><li>缩进应该始终坚持使用4个空格</li><li>输入输出函数print(); input();</li></ul><blockquote><p>用法举例<br><code>print(&#39;The quick brown fox&#39;, &#39;jumps over&#39;, &#39;the lazy dog&#39;)</code><br><code>name = input(&#39;please enter your name: &#39;)</code></p></blockquote><p>注意：input()返回的数据类型是<code>str</code>，str不能直接和整数比较或运算，必须先把str转换成整数。Python提供了<code>int()</code>函数来完成这件事情：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = input(<span class="string">'birth: '</span>)</span><br><span class="line">birth = int(s)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Pyhton-简介&quot;&gt;&lt;a href=&quot;#Pyhton-简介&quot; class=&quot;headerlink&quot; title=&quot;Pyhton 简介&quot;&gt;&lt;/a&gt;Pyhton 简介&lt;/h1&gt;&lt;h2 id=&quot;Python的诞生和发展&quot;&gt;&lt;a href=&quot;#Python的诞生和发展&quot;
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://WangLiangsen.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Pyhton3" scheme="http://WangLiangsen.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Pyhton3/"/>
    
    
      <category term="入门教程" scheme="http://WangLiangsen.github.io/tags/%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
    
      <category term="Python3" scheme="http://WangLiangsen.github.io/tags/Python3/"/>
    
  </entry>
  
  <entry>
    <title>A Countdown</title>
    <link href="http://WangLiangsen.github.io/2019/03/19/A%20Countdown/"/>
    <id>http://WangLiangsen.github.io/2019/03/19/A Countdown/</id>
    <published>2019-03-19T15:09:02.000Z</published>
    <updated>2019-03-19T17:21:29.138Z</updated>
    
    <content type="html"><![CDATA[<h1 id="A-Countdown"><a href="#A-Countdown" class="headerlink" title="A Countdown"></a>A Countdown</h1><p align="right">2019年3月19日 —— 晴 —— 成都市</p>  <hr><p>今天签了人生第一份工作，坐标深圳软件园。  </p><p>回来站在地铁上的时候心里挺空的，前途未卜的感觉。没有找到工作的时候，怕自己没有能力、没有运气、进不了大企业；有Offer之后，开始担心是否能立足、有多大提升。根源并非“不知满足”的心理，而是没有一个确信的规划。所以我突然认识到，<strong>最可怕的不是失败了多少次</strong>，<strong>而是不知道自己想要什么</strong>。   </p><p>最近好多事情也开始countdown，来不及详述，来不及感伤，甚至来不及写在博客里。于是分享一首歌吧：<a href="https://music.163.com/#/song?id=1333026147&amp;userid=266630369" target="_blank" rel="noopener">Avril Lavigne – <em>Tell Me it’s Over</em></a>  </p><blockquote><p><em>Tell me it’s over</em><br><em>If it’s really over</em><br><em>‘Cause it don’t feel like it’s over whenever you’re closing the door</em><br><em>No so tell me it’s over</em>  </p></blockquote><p>路口就在不远处了，朋友的建议、家人的看法、自己的主张来回拉扯着。但愿我能在走到红绿灯之前弄清楚自己想要什么，不至于迷失在车水马龙。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;A-Countdown&quot;&gt;&lt;a href=&quot;#A-Countdown&quot; class=&quot;headerlink&quot; title=&quot;A Countdown&quot;&gt;&lt;/a&gt;A Countdown&lt;/h1&gt;&lt;p align=&quot;right&quot;&gt;2019年3月19日 —— 晴 —— 成
      
    
    </summary>
    
      <category term="日记" scheme="http://WangLiangsen.github.io/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="日记" scheme="http://WangLiangsen.github.io/tags/%E6%97%A5%E8%AE%B0/"/>
    
      <category term="心情" scheme="http://WangLiangsen.github.io/tags/%E5%BF%83%E6%83%85/"/>
    
  </entry>
  
  <entry>
    <title>Linux入门教程02</title>
    <link href="http://WangLiangsen.github.io/2019/03/03/Linux%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B02/"/>
    <id>http://WangLiangsen.github.io/2019/03/03/Linux入门教程02/</id>
    <published>2019-03-03T07:11:20.000Z</published>
    <updated>2019-03-19T17:12:17.276Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux-文件"><a href="#Linux-文件" class="headerlink" title="Linux 文件"></a>Linux 文件</h1><h2 id="Linux-文件的基本属性"><a href="#Linux-文件的基本属性" class="headerlink" title="Linux 文件的基本属性"></a>Linux 文件的基本属性</h2><p>Linux系统是一种典型的多用户系统，不同的用户处于不同的地位，拥有不同的权限。<br>为了保护系统的安全性，Linux系统对不同的用户访问同一文件（包括目录文件）的权限做了不同的规定。</p><p>使用<code>ls –l</code> 命令来显示一个文件的属性以及文件所属的用户和组，如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">scenery@scenery-PC:~$ ls / -l</span><br><span class="line">总用量 970072</span><br><span class="line">drwxr-xr-x   2 root root      4096 3月   1 18:48 bin</span><br><span class="line">drwxr-xr-x   3 root root      4096 3月   2 23:34 boot</span><br><span class="line">drwxrwxr-x   2 root root      4096 3月   1 16:57 cdrom</span><br></pre></td></tr></table></figure><p>在Linux中第一个字符代表这个文件是目录、文件或链接文件等等。</p><ul><li>当为[ d ]则是目录</li><li>当为[ - ]则是文件；</li><li>若是[ l ]则表示为链接文档(link file)；</li><li>若是[ b ]则表示为装置文件里面的可供储存的接口设备(可随机存取装置)；</li><li>若是[ c ]则表示为装置文件里面的串行端口设备，例如键盘、鼠标(一次性读取装置)。  </li></ul><p>接下来的字符中，以三个为一组，且均为『rwx』 的三个参数的组合。</p><ul><li>[ r ]代表可读(read)</li><li>[ w ]代表可写(write)</li><li>[ x ]代表可执行(execute)   </li></ul><p>要注意的是，这三个权限的位置不会改变，如果没有权限，就会出现减号[ - ]</p><blockquote><p>文件属性<br>|类型|属主|用户组|其他用户|<br>|:-:|:-:|:-:|:-:|<br>|d|rwx|r-x|rw-|<br>|0|123|456|789|</p></blockquote><p>从左至右用0-9这些数字来表示</p><ul><li>第0位确定文件类型</li><li>第1-3位确定该文件的所有者拥有该文件的权限。</li><li>第4-6位确定所有者的同组用户拥有该文件的权限</li><li>第7-9位确定其他用户拥有该文件的权限。</li></ul><h2 id="文件所有者和所有者同组用户-属主-属组"><a href="#文件所有者和所有者同组用户-属主-属组" class="headerlink" title="文件所有者和所有者同组用户(属主 属组)"></a>文件所有者和所有者同组用户(属主 属组)</h2><p>对于文件来说，它都有一个特定的所有者，也就是对该文件<strong>具有所有权</strong>的用户<br>同时，在Linux系统中，用户是按组分类的，一个用户属于<strong>一个或多个组</strong> </p><p>文件所有者以外的用户又可以分为<strong>文件所有者的同组用户</strong>和<strong>其他用户</strong><br>因此，Linux系统按文件所有者、文件所有者同组用户和其他用户来规定了不同的文件访问权限。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">scenery@scenery-PC:~$ ls / -l</span><br><span class="line">总用量 970072</span><br><span class="line">drwxr-xr-x   2 root root      4096 3月   1 18:48 bin</span><br><span class="line">drwxr-xr-x   3 root root      4096 3月   2 23:34 boot</span><br><span class="line">drwxrwxr-x   2 root root      4096 3月   1 16:57 cdrom</span><br></pre></td></tr></table></figure></p><p>在以上实例中，bin文件是一个目录文件，属主和属组都为root。<br>属主有可读、可写、可执行的权限（rwx）；<br>与属主同组的其他用户有可读和可执行的权限（r-x）；<br>其他用户也有可读和可执行的权限（r-x）。</p><h2 id="Linux-基础命令"><a href="#Linux-基础命令" class="headerlink" title="Linux 基础命令"></a>Linux 基础命令</h2><p>Linux中有许多常用命令，在学习文件操作之前，需要熟悉一些很基础的命令，这些命令在将来的使用中也是必须掌握的。</p><ol><li><p><code>date</code> 显示日期和时间</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scenery@scenery-PC:~$ date</span><br><span class="line">2019年 03月 14日 星期四 23:42:35 CST</span><br></pre></td></tr></table></figure></li><li><p><code>cal</code> 显示日历</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">scenery@scenery-PC:~$ cal</span><br><span class="line">   三月 2019         </span><br><span class="line"> 日 一 二 三 四 五 六  </span><br><span class="line">                 1  2  </span><br><span class="line">  3  4  5  6  7  8  9  </span><br><span class="line"> 10 11 12 13 14 15 16  </span><br><span class="line"> 17 18 19 20 21 22 23  </span><br><span class="line"> 24 25 26 27 28 29 30  </span><br><span class="line"> 31</span><br></pre></td></tr></table></figure></li><li><p><code>bc</code> 简单计算器<br>如需计算浮点数，需要在bc中执行<code>scale = n</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">scenery@scenery-PC:~$ bc</span><br><span class="line">bc 1.07.1</span><br><span class="line">Copyright 1991-1994, 1997, 1998, 2000, 2004, 2006, 2008, 2012-2017 Free Software Foundation, Inc.</span><br><span class="line">This is free software with ABSOLUTELY NO WARRANTY.</span><br><span class="line">For details <span class="built_in">type</span> `warranty<span class="string">'. </span></span><br><span class="line"><span class="string">scale = 8</span></span><br><span class="line"><span class="string">1/3</span></span><br><span class="line"><span class="string">.33333333</span></span><br></pre></td></tr></table></figure></li><li><p><code>man</code> 在线帮助命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">scenery@scenery-PC:~$ man date</span><br><span class="line">DATE(1)                          User Commands                         DATE(1)</span><br><span class="line"></span><br><span class="line">NAME</span><br><span class="line">       date - <span class="built_in">print</span> or <span class="built_in">set</span> the system date and time</span><br><span class="line"></span><br><span class="line">SYNOPSIS</span><br><span class="line">       date [OPTION]... [+FORMAT]</span><br><span class="line">       date [-u|--utc|--universal] [MMDDhhmm[[CC]YY][.ss]]</span><br><span class="line">...</span><br></pre></td></tr></table></figure><blockquote><p><code>man</code>进入帮助文档后，用arrow key翻页，q键退出 </p></blockquote></li><li><code>sync</code> 将内存中的数据写入磁盘<blockquote><p>一般在关机前执行此命令，系统终端无提示</p></blockquote></li><li><code>shutdown</code> 关机<blockquote><p>需要加入时间参数 如：<code>shutdown now</code></p></blockquote></li><li><p><code>pwd</code> 显示当前所在目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scenery@scenery-PC:~$ <span class="built_in">pwd</span></span><br><span class="line">/home/scenery</span><br></pre></td></tr></table></figure></li><li><p><code>ls</code> 显示目录或文件<br>用参数 -l 可以显示详细信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">scenery@scenery-PC:~$ ls /bin -l</span><br><span class="line">总用量 12480</span><br><span class="line">-rwxr-xr-x 1 root root 1113504 4月   5  2018 bash</span><br><span class="line">-rwxr-xr-x 1 root root  748968 8月  29  2018 brltty</span><br><span class="line">-rwxr-xr-x 1 root root   34888 1月  30  2017 bunzip2</span><br><span class="line">-rwxr-xr-x 1 root root 2062296 1月  18 02:16 busybox</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li><li><p>重要的几个热键  </p><ul><li>[Tab]  —  具有命令补全功能</li><li>[Ctrl]+c  —  让当前的程序『停掉』</li><li>[Ctrl]+d  —  通常代表着键盘输入结束（End Of File, EOF）另外，也可以用来取代exit</li></ul></li><li><p><code>clear</code>  清空当前终端屏幕显示</p></li></ol><h2 id="文件属性操作"><a href="#文件属性操作" class="headerlink" title="文件属性操作"></a>文件属性操作</h2><ol><li><p><code>chgrp</code> 更改文件属组<br>语法：<br><code>chgrp [-R] 属组名文件名</code><br>参数选项<br><code>-R</code>：递归更改文件属组，就是在更改某个目录文件的属组时，如果加上-R的参数，那么该目录下的所有文件的属组都会更改。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chgrp staff /u            将 /u 的属组更改为<span class="string">"staff"</span>。</span><br><span class="line">chgrp -hR staff /u    将 /u 及其子目录下所有文件的属组更改为<span class="string">"staff"</span>。</span><br></pre></td></tr></table></figure></li><li><p><code>chown</code> 更改文件属主，也可以同时更改文件属组<br>语法：<br><code>chown [–R] 属主名 文件名</code><br><code>chown [-R] 属主名：属组名 文件名</code>  </p><p>进入 /root 目录（~）将install.log的拥有者改为bin这个账号：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@www ~] <span class="built_in">cd</span> ~</span><br><span class="line">[root@www ~]<span class="comment"># chown bin install.log</span></span><br><span class="line">[root@www ~]<span class="comment"># ls -l</span></span><br><span class="line">-rw-r--r--  1 bin  users 68495 Jun 25 08:53 install.log</span><br><span class="line">```   </span><br><span class="line"></span><br><span class="line">将install.log的拥有者与群组改回为root：</span><br><span class="line">``` bash</span><br><span class="line">[root@www ~]<span class="comment"># chown root:root install.log</span></span><br><span class="line">[root@www ~]<span class="comment"># ls -l</span></span><br><span class="line">-rw-r--r--  1 root root 68495 Jun 25 08:53 install.log</span><br></pre></td></tr></table></figure></li><li><p><code>chmod</code> 更改文件9个属性  </p><blockquote><p>Linux文件属性有两种设置方法，一种是数字，一种是符号。<br>Linux文件的基本权限就有九个，分别是owner/group/others三种身份各有自己的read/write/execute权限。  </p></blockquote><p>我们可以使用数字来代表各个权限，各权限的分数对照表如下：</p><ul><li>r:4</li><li>w:2</li><li>x:1  </li></ul><p>每种身份(owner/group/others)各自的三个权限(r/w/x)分数是需要累加的.例如当权限为： [-rwxrwx—] 分数则是：<br>owner = rwx = 4+2+1 = 7<br>group = rwx = 4+2+1 = 7<br>others= — = 0+0+0 = 0 </p><p>所以等一下我们设定权限的变更时，该文件的权限数字就是770啦！变更权限的指令chmod的语法是这样的：</p><p><code>chmod [-R] xyz 文件或目录</code><br>选项与参数：<br>xyz : 就是刚刚提到的数字类型的权限属性，为 rwx 属性数值的相加。<br>-R : 进行递归(recursive)的持续变更，亦即连同此目录下的所有文件都会变更  </p><p>如果要将.bashrc这个文件所有的权限都设定启用，那么命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@www ~]<span class="comment"># ls -al .bashrc</span></span><br><span class="line">-rw-r--r--  1 root root 395 Jul  4 11:45 .bashrc</span><br><span class="line">[root@www ~]<span class="comment"># chmod 777 .bashrc</span></span><br><span class="line">[root@www ~]<span class="comment"># ls -al .bashrc</span></span><br><span class="line">-rwxrwxrwx  1 root root 395 Jul  4 11:45 .bashrc</span><br></pre></td></tr></table></figure><blockquote><p>用符号类型改变文件权限<br>|chmod|身份|变更|权限|文件/目录|<br>|:-:|:-:|:-:|:-:|:-:|<br>|chmod|<strong>u</strong>ser <strong>g</strong>roup <strong>o</strong>ther <strong>a</strong>ll |+ - = |r w x |test.log|<br>举例：<code>chmod u=rwx,g=rx,o=r</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; [root@www ~]<span class="comment"># ls -al .bashrc</span></span><br><span class="line">&gt; -rwxr-xr-x  1 root root 395 Jul  4 11:45 .bashrc</span><br><span class="line">&gt; [root@www ~]<span class="comment"># chmod  a+w  .bashrc</span></span><br><span class="line">&gt; [root@www ~]<span class="comment"># ls -al .bashrc</span></span><br><span class="line">&gt; -rwxrwxrwx  1 root root 395 Jul  4 11:45 .bashrc</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Linux-文件&quot;&gt;&lt;a href=&quot;#Linux-文件&quot; class=&quot;headerlink&quot; title=&quot;Linux 文件&quot;&gt;&lt;/a&gt;Linux 文件&lt;/h1&gt;&lt;h2 id=&quot;Linux-文件的基本属性&quot;&gt;&lt;a href=&quot;#Linux-文件的基本属性&quot; c
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://WangLiangsen.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Linux" scheme="http://WangLiangsen.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Linux/"/>
    
    
      <category term="入门教程" scheme="http://WangLiangsen.github.io/tags/%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
    
      <category term="Linux" scheme="http://WangLiangsen.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux入门教程01</title>
    <link href="http://WangLiangsen.github.io/2019/03/02/Linux%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B01/"/>
    <id>http://WangLiangsen.github.io/2019/03/02/Linux入门教程01/</id>
    <published>2019-03-01T17:11:03.000Z</published>
    <updated>2019-03-19T17:12:29.270Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是Linux"><a href="#什么是Linux" class="headerlink" title="什么是Linux"></a>什么是Linux</h1><p>Linux是一套免费使用和自由传播的类Unix操作系统，是一个基于POSIX和UNIX的多用户、多任务、支持多线程和多CPU的操作系统。它能运行主要的UNIX工具软件、应用程序和网络协议。它支持32位和64位硬件。Linux继承了Unix以网络为核心的设计思想，是一个性能稳定的多用户网络操作系统。</p><blockquote><p>简言之，Linux是一种操作系统（Windows / MAC OS / Unix / Linux）<br>Linux有很多发行版，Linux仅是指操作系统的内核</p></blockquote><h2 id="常见的Linux发行版"><a href="#常见的Linux发行版" class="headerlink" title="常见的Linux发行版"></a>常见的Linux发行版</h2><ul><li>UBUNTU 追求稳定的官方支持，对系统稳定性要求较弱，喜欢最新应用，相对来说不太喜欢折腾的开发者。</li><li>Debian，相对UBUNTU难很多的发行版，突出特点是稳定与容易使用的包管理系统，缺点是企业支持不足，为社区开发驱动。</li><li>CentOS，社区维护的RedHat的复刻版本，完全使用RedHat的源码重新编译生成，与RedHat的兼容性在理论上来说是最好的。如果你专注于Linux服务器，如网络管理，架站，那么CentOS是你的选择。</li></ul><h2 id="Linux的特点"><a href="#Linux的特点" class="headerlink" title="Linux的特点"></a>Linux的特点</h2><ol><li>Linux是一个命令行组成的操作系统，<strong>精髓在命令</strong>行，Linux命令许多强大的功能：从简单的磁盘操作、文件存取、到进行复杂的多媒体图象和流媒体文件的制作都离不开命令行  </li><li>源码的开放化<br>Linux操作系统是免费的，并且开发人员可以自由获取使用Linux源代码</li><li>良好的安全性及稳定性<br>Linux的内核继承了Unix系统的稳定、高效的特性同时Linux采取了如对读、写控制、审计跟踪、核心授权等多种安全技术，保障用户开发环境的安全。</li><li>广泛的硬件平台支持<br>Linux可以在多种硬件平台上进行运行，如在带有x86、680x0、SPARC、Alpha等大多数主流的处理器平台均可以运行。</li></ol><h1 id="Linux安装"><a href="#Linux安装" class="headerlink" title="Linux安装"></a>Linux安装</h1><ol><li>下载镜像<blockquote><p>ubuntu <a href="https://www.ubuntu.com/download/desktop" target="_blank" rel="noopener">https://www.ubuntu.com/download/desktop</a><br>centos <a href="https://www.centos.org/download/" target="_blank" rel="noopener">https://www.centos.org/download/</a>  </p></blockquote></li><li>VMWare workstation 安装虚拟机<br>步骤略过（可自行百度）<blockquote><p>也可以在废弃电脑上实体安装</p></blockquote></li></ol><h1 id="Linux的系统启动过程"><a href="#Linux的系统启动过程" class="headerlink" title="Linux的系统启动过程"></a>Linux的系统启动过程</h1><p>Linux系统的启动过程可以分为5个阶段：</p><ul><li>内核的引导</li><li>运行init</li><li>系统初始化</li><li>建立终端 </li><li>用户登录系统<br>这些阶段是依次执行的<h2 id="内核引导"><a href="#内核引导" class="headerlink" title="内核引导"></a>内核引导</h2>当计算机打开电源后，首先是BIOS开机自检，按照BIOS中设置的启动设备来启动。操作系统接管硬件以后，首先读入 <strong>/boot</strong> 目录下的内核文件</li></ul><h2 id="init进程"><a href="#init进程" class="headerlink" title="init进程"></a>init进程</h2><p>init 进程是系统所有进程的起点，你可以把它比拟成系统所有进程的老祖宗。init 程序首先是需要读取配置文件 <strong>/etc/inittab</strong></p><p>许多程序需要开机启动。它们在Windows叫做”服务”（service），在Linux就叫做”守护进程”（<strong>daemon</strong>）。<br>init进程的一大任务，就是去运行这些开机启动的程序。<br>但是，不同的场合需要启动不同的程序，比如用作服务器时，需要启动Apache，用作桌面就不需要<br>Linux允许为不同的场合，分配不同的开机启动程序，这就叫做”<strong>运行级别</strong>“（<strong>runlevel</strong>）。也就是说，启动时根据”运行级别”，确定要运行哪些程序。</p><blockquote><p>Linux系统有7个运行级别(runlevel):  </p></blockquote><blockquote><p>运行级别0：系统停机状态，<em>系统默认运行级别不能设为0，否则不能正常启动</em><br>运行级别1：单用户工作状态，root权限，用于系统维护，禁止远程登陆<br>运行级别2：多用户状态(没有NFS)<br>运行级别3：完全的多用户状态(有NFS)，登陆后进入控制台命令行模式<br>运行级别4：系统未使用，保留<br>运行级别5：X11控制台，登陆后进入图形GUI模式<br>运行级别6：系统正常关闭并重启，<em>默认运行级别不能设为6，否则不能正常启动</em></p></blockquote><h2 id="系统初始化"><a href="#系统初始化" class="headerlink" title="系统初始化"></a>系统初始化</h2><p>在init的配置文件中有这么一行：<br>   <code>si::sysinit:/etc/rc.d/rc.sysinit</code><br>它调用执行了/etc/rc.d/rc.sysinit，而rc.sysinit是一个脚本，它主要是完成一些系统初始化的工作，rc.sysinit是每一个运行级别都要首先运行的重要脚本<br>它主要完成的工作有：激活交换分区，检查磁盘，加载硬件模块以及其它一些需要优先执行任务</p><h2 id="建立终端"><a href="#建立终端" class="headerlink" title="建立终端"></a>建立终端</h2><p>rc执行完毕后，返回init.这时基本系统环境已经设置好了，各种守护进程也已经启动了。init接下来会打开6个终端，以便用户登录系统。在inittab中的以下6行就是定义了6个终端：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1:2345:respawn:/sbin/mingetty tty1</span><br><span class="line">2:2345:respawn:/sbin/mingetty tty2</span><br><span class="line">3:2345:respawn:/sbin/mingetty tty3</span><br><span class="line">4:2345:respawn:/sbin/mingetty tty4</span><br><span class="line">5:2345:respawn:/sbin/mingetty tty5</span><br><span class="line">6:2345:respawn:/sbin/mingetty tty6</span><br></pre></td></tr></table></figure></p><p>在2、3、4、5的运行级别中都将以respawn方式运行<strong>mingetty</strong>程序，mingetty程序能打开终端、设置模式。同时它会显示一个文本登录界面，在这个登录界面中会提示用户输入用户名，而用户输入的用户将作为参数传给login程序来验证用户的身份。</p><h2 id="用户登录系统"><a href="#用户登录系统" class="headerlink" title="用户登录系统"></a>用户登录系统</h2><p>一般来说，用户的登录方式有三种：  </p><ul><li>（1）命令行登录  </li><li>（2）ssh登录  </li><li>（3）图形界面登录  </li></ul><p>对于运行级别为5的图形方式用户来说，他们的登录是通过一个图形化的登录界面。登录成功后可以直接进入<strong>KDE</strong>、<strong>Gnome</strong>等窗口管理器。<br>对于文本登录，当我们看到mingetty的登录界面时，我们就可以输入用户名和密码来登录系统了。<br>Linux的账号验证程序是<strong>login</strong>，login会接收mingetty传来的用户名作为用户名参数。<br>然后login会对用户名进行分析：如果用户名不是root，且存在/etc/nologin文件，login将输出nologin文件的内容，然后退出。<br>在分析完用户名后，login将搜索/etc/passwd以及/etc/shadow来验证密码以及设置账户的其它信息。</p><h2 id="图形模式与文字模式的切换方式"><a href="#图形模式与文字模式的切换方式" class="headerlink" title="图形模式与文字模式的切换方式"></a>图形模式与文字模式的切换方式</h2><p>Linux预设提供了六个命令窗口终端机让我们来登录。</p><p>默认我们登录的就是第一个窗口，也就是tty1，这个六个窗口分别为tty1,tty2 … tty6<br>你可以按下Ctrl + Alt + F1 ~ F6 来切换它们。</p><blockquote><p>如果你用的vmware 虚拟机，命令窗口切换的快捷键为 Alt + Space + F1~F6.<br>如果你在图形界面下请按Alt + Shift + Ctrl + F1~F6 切换至命令窗口</p></blockquote><h2 id="Linux关机"><a href="#Linux关机" class="headerlink" title="Linux关机"></a>Linux关机</h2><p>在linux领域内大多用在服务器上，很少遇到关机的操作<br>正确的关机流程为：<code>sync &gt; shutdown &gt; reboot &gt; halt</code>  </p><table><thead><tr><th style="text-align:left">操作</th><th style="text-align:right">含义</th></tr></thead><tbody><tr><td style="text-align:left">shutdown –h 10 ‘This server will shutdown after 10 mins’</td><td style="text-align:right">这个命令告诉大家，计算机将在10分钟后关机，并且会显示在登陆用户的当前屏幕中</td></tr><tr><td style="text-align:left">Shutdown –h now</td><td style="text-align:right">立马关机</td></tr><tr><td style="text-align:left">Shutdown –h 20:25</td><td style="text-align:right">系统会在今天20:25关机</td></tr><tr><td style="text-align:left">Shutdown –h +10</td><td style="text-align:right">十分钟后关机</td></tr><tr><td style="text-align:left">Shutdown –r now</td><td style="text-align:right">系统立马重启</td></tr><tr><td style="text-align:left">Shutdown –r +10</td><td style="text-align:right">系统十分钟后重启</td></tr><tr><td style="text-align:left">reboot</td><td style="text-align:right">就是重启，等同于 shutdown –r now</td></tr><tr><td style="text-align:left">halt</td><td style="text-align:right">关闭系统，等同于shutdown –h now 和 poweroff</td></tr></tbody></table><blockquote><p>不管是重启系统还是关闭系统，首先要运行sync命令，把内存中的数据写到磁盘中</p><p>关机命令也可以用 init 0 , 重启系统命令也可以用init 6.</p></blockquote><h1 id="Linux-系统目录结构"><a href="#Linux-系统目录结构" class="headerlink" title="Linux 系统目录结构"></a>Linux 系统目录结构</h1><p>登录系统后，在当前命令窗口下输入命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls /</span><br></pre></td></tr></table></figure></p><p>可以查看Linux的目录结构<br>以下是对这些目录的解释：</p><ul><li><p>/bin：<br>bin是Binary的缩写, 这个目录存放着最经常使用的命令。</p></li><li><p>/boot：<br>这里存放的是启动Linux时使用的一些核心文件</p></li><li><p>/dev ：<br>dev是Device(设备)的缩写, 该目录下存放的是Linux的外部设备  </p><blockquote><p>在Linux中设备=文件</p></blockquote></li><li><p>/etc：<br>这个目录用来存放所有的系统管理所需要的配置文件和子目录</p></li><li><p>/home：<br>用户的主目录，在Linux中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名</p></li><li><p>/lib：<br>这个目录里存放着系统最基本的动态连接共享库，其作用类似于Windows里的DLL文件。几乎所有的应用程序都需要用到这些共享库</p></li><li><p>/lost+found：<br>这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件</p></li><li><p>/media linux系统会自动识别一些设备，例如U盘、光驱等等，当识别后，linux会把识别的设备挂载到这个目录下</p></li><li><p>/mnt：<br>系统提供该目录是为了让用户<strong>临时挂载</strong>别的文件系统的，我们可以将光驱挂载在/mnt/上，然后进入该目录就可以查看光驱里的内容了。</p></li><li><p>/opt：<br>这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。</p></li><li><p>/proc：<br>这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。  </p><blockquote><p>这个目录的内容不在硬盘上而是在内存里</p></blockquote></li><li><p>/root：<br>该目录为系统管理员，也称作超级权限者的用户主目录</p></li><li><p>/sbin：<br>s就是Super User的意思，这里存放的是系统管理员使用的系统管理程序</p></li><li><p>/srv：<br>该目录存放一些服务启动之后需要提取的数据。</p></li><li><p>/sys：<br>这是linux2.6内核的一个很大的变化。该目录下安装了2.6内核中新出现的一个文件系统 sysfs 。</p><p>sysfs文件系统集成了下面3种文件系统的信息：针对进程信息的proc文件系统、针对设备的devfs文件系统以及针对伪终端的devpts文件系统。<br>该文件系统是内核设备树的一个直观反映。</p></li><li><p>/tmp：<br>这个目录是用来存放一些临时文件的</p></li><li><p>/usr：<br>这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似与windows下的program files目录</p></li><li><p>/usr/bin：<br>系统用户使用的应用程序</p></li><li><p>/usr/sbin：<br>超级用户使用的比较高级的管理程序和系统守护程序</p></li><li><p>/usr/src：内核源代码默认的放置目录</p></li><li><p>/var：<br>这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下,包括各种日志文件。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;什么是Linux&quot;&gt;&lt;a href=&quot;#什么是Linux&quot; class=&quot;headerlink&quot; title=&quot;什么是Linux&quot;&gt;&lt;/a&gt;什么是Linux&lt;/h1&gt;&lt;p&gt;Linux是一套免费使用和自由传播的类Unix操作系统，是一个基于POSIX和UNIX的多用
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://WangLiangsen.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Linux" scheme="http://WangLiangsen.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Linux/"/>
    
    
      <category term="入门教程" scheme="http://WangLiangsen.github.io/tags/%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
    
      <category term="Linux" scheme="http://WangLiangsen.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>5分钟入门MARKDOWN</title>
    <link href="http://WangLiangsen.github.io/2019/01/18/markdown%E8%AF%AD%E6%B3%95%E5%85%A5%E9%97%A8/"/>
    <id>http://WangLiangsen.github.io/2019/01/18/markdown语法入门/</id>
    <published>2019-01-17T16:18:59.000Z</published>
    <updated>2019-03-19T16:33:14.539Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是Markdown？"><a href="#什么是Markdown？" class="headerlink" title="什么是Markdown？"></a>什么是Markdown？</h1><p>Markdwon 是一种轻量级标记语言，由Aaron Swartz和John Gruber共同设计。它以纯文本形式（易读、易写、易更改）编写文档，并最终以HTLM格式发布。Markdown也可以理解为将以Markdown语法编写的语言转换成HTML内容的工具。</p><blockquote><p><strong>Aaron Swartz的传奇一生</strong></p><ul><li>14岁参与RSS 1.0规格标准制订。</li><li>2004年入读斯坦福大学，之后退学。</li><li>2005年创建 Infogami,之后与Reddit合并成为其合伙人。</li><li>2010年创立示进会（Demand Preogress）,积极参与禁止网络盗版法案（SOPA）活动，最终该提案被撤回。</li><li>2011年7月19日,因被控从MIT和JSTOR下载480万篇学术论文并以免费形式上传于网络被捕。</li><li>2013年1月自杀身亡。</li></ul></blockquote><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p>注意：Markdown使用 # + * &gt; _ 等符号来标记，符号后面必须跟上至少1个空格才会被语法识别。</p><h1 id="Markdown语法"><a href="#Markdown语法" class="headerlink" title="Markdown语法"></a>Markdown语法</h1><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>Markdown的标题用’# ‘标记<br>在想要作为标题的文字开头加上1~6个#，依次表示一级到六级标题<br>举例：<br># 一级标题<br>## 二级标题<br>### 三级标题  </p><blockquote><p>为了避免文字TOC出现混乱，本例不做输出演示。</p></blockquote><h2 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h2><p>在行尾添加两个空格（spacebar）加一个回车（enter）表示换行：</p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>列表分为 无序列表 和 有序列表</p><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>用 - + * 作为打头标记<br>举例：<br>+ 项目1<br>+ 项目2<br>+ 项目3<br>输出：</p><blockquote><ul><li>项目1</li><li>项目2</li><li>项目3</li></ul></blockquote><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>有序列表则使用数字加英文句点.来表示<br>举例:<br>1. 第一项<br>2. 第二项<br>3. 第三项<br>输出：</p><blockquote><ol><li>第一项</li><li>第二项</li><li>第三项</li></ol></blockquote><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>引用以 &gt; 来表示，引用中又支持多级引用、标题、列表、代码块、分割线等常规语法。（也就是说：引用里面可以加标题，列表，嵌套引用等等。）<br>举例：<br>> 引用自百度文库<br>>&gt; 引用自网易云音乐<br>输出：</p><blockquote><p>引用自百度文库</p><blockquote><p>引用自网易云音乐</p></blockquote></blockquote><h2 id="文字样式（字体）"><a href="#文字样式（字体）" class="headerlink" title="文字样式（字体）"></a>文字样式（字体）</h2><p>*斜体文本*</p><p>**加粗文本**</p><p>*<strong>斜粗体文本*</strong></p><p>\<del>删除文本</del></p><p>` 底纹 `</p><p>&lt; sub&gt;下标文字&lt; /sub&gt;</p><p>&lt; sup&gt;上标文字&lt; /sup&gt;</p><p>&lt; u&gt;下划线文本&lt; /u&gt;</p><p>输出：</p><blockquote><p><em>斜体文本</em></p><p><strong>加粗文本</strong></p><p><strong><em>斜粗体文本</em></strong></p><p><del>删除文本</del></p><p><code>底纹</code></p><p><sub>下标文字</sub>  正常文字</p><p><sup>上标文字</sup>  正常文字</p><p><u>下划线文本</u></p></blockquote><h2 id="图片与链接"><a href="#图片与链接" class="headerlink" title="图片与链接"></a>图片与链接</h2><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>链接的形式: 内联 和 引用。这两种形式下链接文本的定界符都是 [中括号].<br>要创建内联链接, 只需在链接文本的右括号后面紧接一对圆括号. 圆括号里面放所需的 URL 链接, 还可以放一个 可选 的链接标题, 标题要用引号包围. </p><p>自动链接：直接使用\&lt; &gt;括起来 &lt;yourlink.xyz&gt;</p><p>链接： [ ]( ) [链接描述](链接的地址)</p><p>举例：</p><p>This is [an example](<a href="http://example.com/" target="_blank" rel="noopener">http://example.com/</a> “Title”) inline link.</p><p>This is an example \<a href="http://example.com" target="_blank" rel="noopener">http://example.com</a></p><p>输出：</p><blockquote><p>This is <a href="http://example.com/" title="Title" target="_blank" rel="noopener">an example</a> inline link.</p><p>This is an example <a href="http://example.com" target="_blank" rel="noopener">http://example.com</a></p></blockquote><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>Markdown 使用了类似链接的语法来插入图片<br>在链接的语法前面加一个感叹号: !<br>也就是:</p><p>图片：![Alt text] (/path/to/img.jpg “Optional title”)</p><p>由于没有本地路径，此例子不做举例输出演示。</p><h2 id="代码和代码块"><a href="#代码和代码块" class="headerlink" title="代码和代码块"></a>代码和代码块</h2><h3 id="代码行"><a href="#代码行" class="headerlink" title="代码行"></a>代码行</h3><p>引用的代码只有一行，可以用 ` 号将语句包起来。<br>举例：</p><p>`cout &lt;&lt; “Hello world” //this is an example of C++ outputing hello word`</p><p>输出：</p><blockquote><p><code>cout &lt;&lt; &quot;Hello world&quot; //this is an example of C++ outputing hello word</code></p></blockquote><h3 id="代码块（段）"><a href="#代码块（段）" class="headerlink" title="代码块（段）"></a>代码块（段）</h3><p>用一对\<figure class="highlight plain"><figcaption><span>将代码括起来，在第一个\`\`\`之后，空格输入语言名称即可高亮代码。  </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">格式如下：</span><br><span class="line"></span><br><span class="line">\``` [语言]</span><br><span class="line"></span><br><span class="line">这里是代码​</span><br><span class="line"></span><br><span class="line">\</span><br></pre></td></tr></table></figure></p><p>举例：</p><p>``` C++</p><p>#include<iostream><br>int main()<br>{<br>    using namespace std;<br>    int x = 1;<br>    x = x++; //x = x + 1<br>    cout &lt;&lt; x;<br>    return 0;<br>}</iostream></p><p>```</p><p>输出：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">1</span>;</span><br><span class="line">    x = x++; <span class="comment">//x = x + 1</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; x;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><p>在一行中使用三个或三个以上的 * 可以添加分隔线，中间可以插入空格，但是不能有其他字符。</p><p>举例：</p><p>***</p><p>输出：</p><blockquote><hr></blockquote><h2 id="高级应用"><a href="#高级应用" class="headerlink" title="高级应用"></a>高级应用</h2><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>表格用竖线|分割不同列，用以下标记设置对齐方式 (ATTENTION！必须) ：<br>居左:—-    居中:—-:    居右—-:</p><p>举例：</p><p>|标题1|标题2|标题3|</p><p>|:—|:—:|—:|</p><p>|居左文本|居中文本|居右文本|</p><p>输出：</p><blockquote><table><thead><tr><th style="text-align:left">标题1</th><th style="text-align:center">标题2</th><th style="text-align:right">标题3</th></tr></thead><tbody><tr><td style="text-align:left">居左文本</td><td style="text-align:center">居中文本</td><td style="text-align:right">居右文本</td></tr></tbody></table></blockquote><h3 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h3><p>使用[^number ]来定义脚注</p><p>举例：</p><p>这是一个脚注的例子[^ 1]</p><p>[^1 ]: 这里是脚注</p><p>输出：</p><blockquote><p>这是一个脚注的例子[^1]</p></blockquote><blockquote></blockquote><h3 id="常用弥补Markdown的Html标签"><a href="#常用弥补Markdown的Html标签" class="headerlink" title="常用弥补Markdown的Html标签"></a>常用弥补Markdown的Html标签</h3><h4 id="字体大小和颜色"><a href="#字体大小和颜色" class="headerlink" title="字体大小和颜色"></a>字体大小和颜色</h4><p>\&lt; font face=”微软雅黑” color=”red” size=”6”&gt;字体及字体颜色和大小<br>\&lt; /font&gt;<br>\&lt; font color=”#0000ff”&gt;字体颜色&lt;/ font&gt;</p><font face="微软雅黑" color="red" size="6">字体及字体颜色和大小</font><br><font color="#0000ff">字体颜色</font><h4 id="文本对齐方式"><a href="#文本对齐方式" class="headerlink" title="文本对齐方式"></a>文本对齐方式</h4><p>&lt; p align=”left”&gt;居左文本&lt; /p&gt;<br>&lt; p align=”center”&gt;居中文本&lt; /p&gt;<br>&lt; p align=”right”&gt;居右文本&lt; /p&gt;</p><p align="left">居左文本</p><br><p align="center">居中文本</p><br><p align="right">居右文本</p><h4 id="任务列表"><a href="#任务列表" class="headerlink" title="任务列表"></a>任务列表</h4><p>任务列表支持Markdown的字体格式，支持链接，支持有序和无序列表。<br>用- [ ]表示未完成<br>用- [x]表示完成</p><p>举例：</p><p>- [ ] <a href="">links</a>, <strong>formatting</strong>, and <del>tags</del> supported<br>- [x] list syntax required (any unordered or ordered list   supported)<br>- [ ] this is a complete item<br>- [x] this is an incomplete item  </p><p>输出：</p><blockquote><ul><li style="list-style: none"><input type="checkbox"> <a href="">links</a>, <strong>formatting</strong>, and <del>tags</del> supported  </li><li style="list-style: none"><input type="checkbox" checked> list syntax required (any unordered or ordered list   supported)  </li><li style="list-style: none"><input type="checkbox"> this is a complete item  </li><li style="list-style: none"><input type="checkbox" checked> this is an incomplete item  </li></ul></blockquote><h4 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h4><p>转义字符就是想显示出Markdown语法内的标记字符，比如* _ - + 等。<br>这篇教程在举例部分，为了显示语法就用了很多转义字符。</p><p>转义字符用 \ 作为符号的前缀</p><h1 id="在Visual-Studio-Code中编辑Markdown"><a href="#在Visual-Studio-Code中编辑Markdown" class="headerlink" title="在Visual Studio Code中编辑Markdown"></a>在Visual Studio Code中编辑Markdown</h1><p>在扩展中心（ctrl+shift+x）安装Markdown all in one插件就能很方便的编辑和预览Markdown文件。<br>快捷键如下：</p><table><thead><tr><th style="text-align:left">Key</th><th style="text-align:left">Command</th></tr></thead><tbody><tr><td style="text-align:left">Ctrl + B</td><td style="text-align:left">加粗</td></tr><tr><td style="text-align:left">Ctrl + I</td><td style="text-align:left">斜体</td></tr><tr><td style="text-align:left">Alt + S</td><td style="text-align:left">删除线</td></tr><tr><td style="text-align:left">Ctrl + Shift + ]</td><td style="text-align:left">标题 从一级到六级递增</td></tr><tr><td style="text-align:left">Ctrl + Shift + [</td><td style="text-align:left">标题 从当前级到一级递减</td></tr><tr><td style="text-align:left">Ctrl + M</td><td style="text-align:left">数学公式环境</td></tr><tr><td style="text-align:left">Alt + C</td><td style="text-align:left">Check/Uncheck task list item</td></tr><tr><td style="text-align:left">Ctrl + Shift + V</td><td style="text-align:left">Markdown预览</td></tr><tr><td style="text-align:left">Ctrl + K V</td><td style="text-align:left">Toggle preview to side</td></tr></tbody></table><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p>本教程参考的文档如下：</p><blockquote><p><a href="https://markdown-zh.readthedocs.io/en/latest/" target="_blank" rel="noopener">https://markdown-zh.readthedocs.io/en/latest/</a><br><a href="http://www.cycygogo.cn/2017/12/05/Markdown-Syntax/" target="_blank" rel="noopener">http://www.cycygogo.cn/2017/12/05/Markdown-Syntax/</a><br><a href="https://www.jianshu.com/p/ccfd81fe77d2" target="_blank" rel="noopener">https://www.jianshu.com/p/ccfd81fe77d2</a></p></blockquote><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><blockquote><p>此Markdown教程尽可能简单的讲解了Markdown的语法，在字体及列表中，除了*<br>仍有很多其他标识符可以使用。本文只介绍了其中一种。</p></blockquote><blockquote><p>除了入门Markdown，本文也可留作日后语法备查。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;什么是Markdown？&quot;&gt;&lt;a href=&quot;#什么是Markdown？&quot; class=&quot;headerlink&quot; title=&quot;什么是Markdown？&quot;&gt;&lt;/a&gt;什么是Markdown？&lt;/h1&gt;&lt;p&gt;Markdwon 是一种轻量级标记语言，由Aaron Swa
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://WangLiangsen.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Markdown" scheme="http://WangLiangsen.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Markdown/"/>
    
    
      <category term="入门教程" scheme="http://WangLiangsen.github.io/tags/%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
    
      <category term="Markdown" scheme="http://WangLiangsen.github.io/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>C++入门教程01</title>
    <link href="http://WangLiangsen.github.io/2019/01/05/C++%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B001/"/>
    <id>http://WangLiangsen.github.io/2019/01/05/C++学习笔记01/</id>
    <published>2019-01-05T07:10:02.000Z</published>
    <updated>2019-03-19T15:12:09.226Z</updated>
    
    <content type="html"><![CDATA[<h1 id="开始学习C"><a href="#开始学习C" class="headerlink" title="开始学习C++"></a>开始学习C++</h1><h2 id="关于C-的源文件"><a href="#关于C-的源文件" class="headerlink" title="关于C++的源文件"></a>关于C++的源文件</h2><p>C++的源代码(Source Code)文件扩展名为.C 或者.cpp</p><h2 id="Windows上的编译器"><a href="#Windows上的编译器" class="headerlink" title="Windows上的编译器"></a>Windows上的编译器</h2><p><em>Compile</em> 对打开文件中的代码进行编译</p><p><em>Build</em> 和  <em>Make</em> 编译项目中所有源代码文件，如果只有一个被修改则只编译一个</p><p><em>Build All</em> 重新编译所有源代码文件的代码</p><p><em>Link</em> 组合源代码和库代码</p><p><em>Run</em> 或 <em>Execute</em> 运行程序（自动完成上述步骤）</p><p><em>Debug/Release</em> 以步进方式运行程序 <em>Debug</em> 中带有调试信息，程序较大，执行较慢</p><blockquote><p>在Visual Studio上运行程序时，通常要加入cin.get(); 或者两句cin.get(); cin.get();</p></blockquote><blockquote><p>目的是防止程序输出窗口一闪而过</p></blockquote><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><blockquote><p>可以对示例程序使用同一个项目，只在项目里增删源文件，可以节省空间和工作量</p></blockquote><blockquote><p>改正错误时应该首先改正第一个错误；如果在标识行上找不到错误，往往在上一行</p></blockquote><h2 id="C-基础语法"><a href="#C-基础语法" class="headerlink" title="C++基础语法"></a>C++基础语法</h2><ol><li><p>C++用 ; (分号)来区分语句结尾。</p></li><li><p>// 表示注释 也可以用/<em>     </em>/</p></li><li><p>#include 表示预处理编译指令，如： #include&lt;iostream&gt;</p></li><li><p>int main() 表示主函数头。</p></li><li><p>using namespace 表示使用什么名字空间，如：using namespace std;</p></li><li><p>{      }表示函数体，在花括号之间。</p></li><li><p>int型的main函数需要 return 一个整形的数作为返回值，通常为return 0;</p></li></ol><h2 id="cin-和-cout"><a href="#cin-和-cout" class="headerlink" title="cin 和 cout"></a>cin 和 cout</h2><p>cin 和 cout 在名字空间std内，分别用来输入和输出变量值/字符串</p><p>cin_ _用来输入字符。cin &gt;&gt; number 表示信息从cin流向number变量。</p><p>cout &lt;&lt; “a = ”&lt;&lt; a &lt;&lt; endl; 表示字符串和变量值流向cout。 输出为a=1(换行)</p><blockquote><p>如果没有using namespace std; 就需要std::cout 或 using std::cout;</p></blockquote><h2 id="声明、赋值以及函数的概念"><a href="#声明、赋值以及函数的概念" class="headerlink" title="声明、赋值以及函数的概念"></a>声明、赋值以及函数的概念</h2><h3 id="声明语句"><a href="#声明语句" class="headerlink" title="声明语句"></a>声明语句</h3><p>int number = 8；<em>//声明整形变量number同时初始化为8</em></p><blockquote><p>C++通常在首次使用变量前才做声明；而C则是在函数体的开始部位声明所需变量。</p></blockquote><h3 id="赋值语句"><a href="#赋值语句" class="headerlink" title="赋值语句"></a>赋值语句</h3><p>number = 25;_ //把25赋值给number变量。_</p><blockquote><p>如果出现传递等号的赋值，如a = b = c = 1; 是从右向左依次赋值</p></blockquote><h3 id="函数的概念"><a href="#函数的概念" class="headerlink" title="函数的概念"></a>函数的概念</h3><ol><li><p>x = sqrt(6.25);_ //变量 &lt;&lt;函数返回值 = 函数名（参数列表）_</p><p> 有些函数不只一个参数，有些函数没有参数甚至没有返回值。</p></li><li><p>使用库函数前要包含相应库文件，如：#include&lt;cmath&gt;</p><p> 使用用户自定义函数前要对函数原型进行声明，如：int func(int)；</p></li><li><p>Main()函数的返回值传递给操作系统，也叫退出值。通常0表示程序运行成功，非零则表示存在问题。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;开始学习C&quot;&gt;&lt;a href=&quot;#开始学习C&quot; class=&quot;headerlink&quot; title=&quot;开始学习C++&quot;&gt;&lt;/a&gt;开始学习C++&lt;/h1&gt;&lt;h2 id=&quot;关于C-的源文件&quot;&gt;&lt;a href=&quot;#关于C-的源文件&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://WangLiangsen.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="C++学习笔记" scheme="http://WangLiangsen.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/C-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="C++" scheme="http://WangLiangsen.github.io/tags/C/"/>
    
      <category term="入门教程" scheme="http://WangLiangsen.github.io/tags/%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
</feed>
