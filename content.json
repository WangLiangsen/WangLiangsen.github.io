[{"title":"Python 3 入门教程02","date":"2019-03-19T17:13:55.000Z","path":"2019/03/20/python入门教程02/","text":"Python的基本数据类型 整数 1234567 1，100，-8080，0， ``` &gt; 十六进制整数 `0xff00，0xa5b4c3d2`2. 浮点数 ``` Python 1.23，3.14，-9.01 1.23e9 12.3e8 1.2e-5 字符串字符串是以单引号&#39;或双引号&quot;括起来的任意文本，比如&#39;abc&#39;，&quot;xyz&quot; 字符串内部既包含&#39;又包含&quot;可以用转义字符\\来标识&#39;I\\&#39;m \\&quot;OK\\&quot;!&#39; 转义字符\\可以转义很多字符，比如\\n表示换行，\\t表示制表符，字符\\本身也要转义，所以\\\\表示的字符就是\\ 布尔值布尔值只有True、False两种值(注意大小写) 空值空值是Python里一个特殊的值，用None表示。None不能理解为0，因为0是有意义的，而None是一个特殊的空值。 Python的变量变量名必须是大小写英文、数字和_的组合，且不能用数字开头在Python中，等号=是赋值语句，可以把任意数据类型赋值给变量，同一个变量可以反复赋值，而且可以是不同类型的变量1234a = 123 # a是整数print(a)a = 'ABC' # a变为字符串print(a) 变量本身类型不固定的语言称之为动态语言，与之对应的是静态语言。静态语言在定义变量时必须指定变量类型 (如 C 或 C++) Python的常量在Python中，通常用全部大写的变量名表示常量：1PI = 3.14159265359 # PI是一个常量 Python的字符串编码在Python 3版本中，字符串是以Unicode编码的，也就是说，Python的字符串支持多语言对于单个字符的编码，Python提供了ord()函数获取字符的整数表示，chr()函数把编码转换为对应的字符：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051&gt;&gt;&gt; ord('A')65&gt;&gt;&gt; ord('中')20013&gt;&gt;&gt; chr(66)'B'&gt;&gt;&gt; chr(25991)'文'``` 以Unicode表示的str通过`encode()`方法可以编码为指定的bytes，例如：``` shell&gt;&gt;&gt; 'ABC'.encode('ascii')b'ABC'&gt;&gt;&gt; '中文'.encode('utf-8')b'\\xe4\\xb8\\xad\\xe6\\x96\\x87'&gt;&gt;&gt; '中文'.encode('ascii')Traceback (most recent call last): File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;UnicodeEncodeError: 'ascii' codec can't encode characters in position 0-1: ordinal not in range(128)``` 反过来，如果我们从网络或磁盘上读取了字节流，那么读到的数据就是bytes。要把bytes变为str，就需要用`decode()`方法：``` shell&gt;&gt;&gt; b'ABC'.decode('ascii')'ABC'&gt;&gt;&gt; b'\\xe4\\xb8\\xad\\xe6\\x96\\x87'.decode('utf-8')'中文'``` 要计算str包含多少个字符，可以用`len()`函数：``` shell&gt;&gt;&gt; len('ABC')3&gt;&gt;&gt; len('中文')2``` len()函数计算的是str的字符数，如果换成bytes，`len()`函数就计算字节数：``` shell&gt;&gt;&gt; len(b'ABC')3&gt;&gt;&gt; len(b'\\xe4\\xb8\\xad\\xe6\\x96\\x87')6&gt;&gt;&gt; len('中文'.encode('utf-8'))6``` # 格式化在Python中，采用的格式化方式和C语言是一致的，用%实现，举例如下：``` shell&gt;&gt;&gt; 'Hello, %s' % 'world''Hello, world'&gt;&gt;&gt; 'Hi, %s, you have $%d.' % ('Michael', 1000000)'Hi, Michael, you have $1000000.' %运算符就是用来格式化字符串的。在字符串内部，%s表示用字符串替换，%d表示用整数替换|占位符|替换内容||:-|-:||%d|整数||%f|浮点数||%s|字符串||%x|十六进制整数| list和tuple列表list什么是listlist是一种有序的集合，可以随时添加和删除其中的元素123&gt;&gt;&gt; classmates = ['Michael', 'Bob', 'Tracy']&gt;&gt;&gt; classmates['Michael', 'Bob', 'Tracy'] 变量classmates就是一个list。用len()函数可以获得list元素的个数：(此例子中是3) 用索引来访问list中每一个位置的元素，记得索引是从0开始的当索引超出了范围时，Python会报一个IndexError错误，所以，要确保索引不要越界12345678&gt;&gt;&gt; classmates[0]'Michael'&gt;&gt;&gt; classmates[2]'Tracy'&gt;&gt;&gt; classmates[3]Traceback (most recent call last): File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;IndexError: list index out of range 如果要取最后一个元素，除了计算索引位置外，还可以用-1做索引，直接获取最后一个元素以此类推，可以获取倒数第2个、倒数第3个(-2 -3) list的常见操作 list中追加元素到末尾 123&gt;&gt;&gt; classmates.append('Adam')&gt;&gt;&gt; classmates['Michael', 'Bob', 'Tracy', 'Adam'] 把元素插入到指定的位置 123&gt;&gt;&gt; classmates.insert(1, &apos;Jack&apos;)&gt;&gt;&gt; classmates[&apos;Michael&apos;, &apos;Jack&apos;, &apos;Bob&apos;, &apos;Tracy&apos;, &apos;Adam&apos;] 要删除list末尾的元素 1234&gt;&gt;&gt; classmates.pop()'Adam'&gt;&gt;&gt; classmates['Michael', 'Jack', 'Bob', 'Tracy'] 删除指定位置的元素 1234&gt;&gt;&gt; classmates.pop(1)'Jack'&gt;&gt;&gt; classmates['Michael', 'Bob', 'Tracy'] 把某个元素替换成别的元素 12345678&gt;&gt;&gt; classmates[1] = 'Sarah'&gt;&gt;&gt; classmates['Michael', 'Sarah', 'Tracy']``` ### list的其他用法1. list里面的元素的数据类型也可以不同：``` shell&gt;&gt;&gt; L = ['Apple', 123, True] list元素也可以是另一个list： 123456789&gt;&gt;&gt; s = ['Python', 'java', ['asp', 'php'], 'scheme']&gt;&gt;&gt; len(s)4``` 3. 如果一个list中一个元素也没有，就是一个空的list，它的长度为0：``` shell&gt;&gt;&gt; L = []&gt;&gt;&gt; len(L)0 元组tupletuple和list非常类似，但是tuple一旦初始化就不能修改1&gt;&gt;&gt; classmates = ('Michael', 'Bob', 'Tracy') 现在，classmates这个tuple不能变了，它也没有append()，insert()这样的方法。其他获取元素的方法和list是一样的，你可以正常地使用classmates[0]，classmates[-1]，但不能赋值成另外的元素。 tuple不可变，所以代码更安全。如果可能，能用tuple代替list就尽量用tuple 如果要定义一个空的tuple，可以写成()：123&gt;&gt;&gt; t = ()&gt;&gt;&gt; t() 只有1个元素的tuple定义时必须加一个逗号,，来消除歧义：123&gt;&gt;&gt; t = (1,)&gt;&gt;&gt; t(1,) Python在显示只有1个元素的tuple时，也会加一个逗号,，以免被误解成数学计算意义上的括号","tags":[{"name":"入门教程","slug":"入门教程","permalink":"http://WangLiangsen.github.io/tags/入门教程/"},{"name":"Python3","slug":"Python3","permalink":"http://WangLiangsen.github.io/tags/Python3/"}]},{"title":"Python 3 入门教程01","date":"2019-03-19T16:18:59.000Z","path":"2019/03/20/python入门教程01/","text":"Pyhton 简介Python的诞生和发展 Python是荷兰著名计算机程序员Guido van Rossum在1989年圣诞节期间，为了打发无聊的圣诞节而编写的一个编程语言。 Python就为我们提供了非常完善的基础代码库，覆盖了网络、文件、GUI、数据库、文本等大量内容，被形象地称作“内置电池（batteries included）”。用Python开发，许多功能不必从零编写，直接使用现成的即可。 除了内置的库外，Python还有大量的第三方库，也就是别人开发的，供你直接使用的东西。当然，如果你开发的代码通过很好的封装，也可以作为第三方库给别人使用。 许多大型网站就是用Python开发的，例如YouTube、Instagram，还有国内的豆瓣。很多大公司，包括Google、Yahoo等，甚至NASA（美国航空航天局）都大量地使用Python。 Python的优缺点 +适合开发网络应用，包括网站、后台服务、系统管理员需要的脚本任务 -运行速度慢，因为Python是解释型语言 -代码不能加密。如果要发布你的Python程序，实际上就是发布源代码 Python的安装Python是跨平台的，它可以运行在Windows、Mac和各种Linux/Unix系统上。在Windows上写Python程序，放到Linux上也能够运行目前，Python有两个版本，一个是2.x版，一个是3.x版，这两个版本是不兼容的。但3.x版越来越普及。 从Python的官方网站下载Python 3.7对应的64位安装程序或32位安装程序https://www.Python.org/downloads/ 特别注意安装时勾选Add Python 3.7 to PATH Windows + R，输入Python，如果出现 &gt;&gt;&gt; 表示Python安装成功 Python解释器当我们编写Python代码时，我们得到的是一个包含Python代码的以.py为扩展名的文本文件。要运行代码，就需要Python解释器去执行.py文件。常见的各种Python解释器： CPython当我们从Python官方网站下载并安装好Python 3.x后，我们就直接获得了一个官方版本的解释器：CPython。这个解释器是用C语言开发的，所以叫CPython IPythonIPython只是在交互方式上有所增强，但是执行Python代码的功能和CPython是完全一样的CPython用&gt;&gt;&gt;作为提示符，而IPython用In [序号]:作为提示符。 PyPyPyPy采用JIT技术，对Python代码进行动态编译（注意不是解释），所以可以显著提高Python代码的执行速度。 JythonJython是运行在Java平台上的Python解释器，可以直接把Python代码编译成Java字节码执行 IronPythonIronPython和Jython类似，只不过IronPython是运行在微软.Net平台上的Python解释器，可以直接把Python代码编译成.Net的字节码。 交互模式和命令行模式在命令行模式下，可以执行Python进入Python交互式环境，也可以执行Python hello.py运行一个.py文件。下面是一个命令行模式和交互模式转换的例子1234C:\\&gt;PythonPython 3.7.2 (tags/v3.7.2:9a3ffc0492, Dec 23 2018, 23:09:28) [MSC v.1916 64 bit (AMD64)] on win32Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.&gt;&gt;&gt; exit() Python交互模式的代码是输入一行，执行一行，而命令行模式下直接运行.py文件是一次性执行该文件内的所有代码。可见，Python交互模式主要是为了调试Python代码用的，也便于初学者学习，它不是正式运行Python代码的环境！ 编写第一个Python程序windows下打开IDLE –&gt; file –&gt; new file在新窗口中输入12345678print('hello world!')``` 保存后，按`F5`执行，此时原来的命令行窗口会显示``` Python&gt;&gt;&gt; ================== RESTART: C:\\Users\\scenery\\Desktop\\hello.py ==================hello world!&gt;&gt;&gt; 用Python开发程序，完全可以一边在文本编辑器里写代码，一边开一个交互式命令窗口，在写代码的过程中，把部分代码粘到命令行去验证，事半功倍！ Python编程基础 Python的代码采用缩进方式 以#开头的语句是注释 以冒号:结尾的语句，视为缩进代码块 缩进应该始终坚持使用4个空格 输入输出函数print(); input(); 用法举例print(&#39;The quick brown fox&#39;, &#39;jumps over&#39;, &#39;the lazy dog&#39;)name = input(&#39;please enter your name: &#39;) 注意：input()返回的数据类型是str，str不能直接和整数比较或运算，必须先把str转换成整数。Python提供了int()函数来完成这件事情：12s = input('birth: ')birth = int(s)","tags":[{"name":"入门教程","slug":"入门教程","permalink":"http://WangLiangsen.github.io/tags/入门教程/"},{"name":"Python3","slug":"Python3","permalink":"http://WangLiangsen.github.io/tags/Python3/"}]},{"title":"A Countdown","date":"2019-03-19T15:09:02.000Z","path":"2019/03/19/A Countdown/","text":"A Countdown2019年3月19日 —— 晴 —— 成都市 今天签了人生第一份工作，坐标深圳软件园。 回来站在地铁上的时候心里挺空的，前途未卜的感觉。没有找到工作的时候，怕自己没有能力、没有运气、进不了大企业；有Offer之后，开始担心是否能立足、有多大提升。根源并非“不知满足”的心理，而是没有一个确信的规划。所以我突然认识到，最可怕的不是失败了多少次，而是不知道自己想要什么。 最近好多事情也开始countdown，来不及详述，来不及感伤，甚至来不及写在博客里。于是分享一首歌吧：Avril Lavigne – Tell Me it’s Over Tell me it’s overIf it’s really over‘Cause it don’t feel like it’s over whenever you’re closing the doorNo so tell me it’s over 路口就在不远处了，朋友的建议、家人的看法、自己的主张来回拉扯着。但愿我能在走到红绿灯之前弄清楚自己想要什么，不至于迷失在车水马龙。","tags":[{"name":"日记","slug":"日记","permalink":"http://WangLiangsen.github.io/tags/日记/"},{"name":"心情","slug":"心情","permalink":"http://WangLiangsen.github.io/tags/心情/"}]},{"title":"Linux入门教程02","date":"2019-03-03T07:11:20.000Z","path":"2019/03/03/Linux入门教程02/","text":"Linux 文件Linux 文件的基本属性Linux系统是一种典型的多用户系统，不同的用户处于不同的地位，拥有不同的权限。为了保护系统的安全性，Linux系统对不同的用户访问同一文件（包括目录文件）的权限做了不同的规定。 使用ls –l 命令来显示一个文件的属性以及文件所属的用户和组，如： 12345scenery@scenery-PC:~$ ls / -l总用量 970072drwxr-xr-x 2 root root 4096 3月 1 18:48 bindrwxr-xr-x 3 root root 4096 3月 2 23:34 bootdrwxrwxr-x 2 root root 4096 3月 1 16:57 cdrom 在Linux中第一个字符代表这个文件是目录、文件或链接文件等等。 当为[ d ]则是目录 当为[ - ]则是文件； 若是[ l ]则表示为链接文档(link file)； 若是[ b ]则表示为装置文件里面的可供储存的接口设备(可随机存取装置)； 若是[ c ]则表示为装置文件里面的串行端口设备，例如键盘、鼠标(一次性读取装置)。 接下来的字符中，以三个为一组，且均为『rwx』 的三个参数的组合。 [ r ]代表可读(read) [ w ]代表可写(write) [ x ]代表可执行(execute) 要注意的是，这三个权限的位置不会改变，如果没有权限，就会出现减号[ - ] 文件属性|类型|属主|用户组|其他用户||:-:|:-:|:-:|:-:||d|rwx|r-x|rw-||0|123|456|789| 从左至右用0-9这些数字来表示 第0位确定文件类型 第1-3位确定该文件的所有者拥有该文件的权限。 第4-6位确定所有者的同组用户拥有该文件的权限 第7-9位确定其他用户拥有该文件的权限。 文件所有者和所有者同组用户(属主 属组)对于文件来说，它都有一个特定的所有者，也就是对该文件具有所有权的用户同时，在Linux系统中，用户是按组分类的，一个用户属于一个或多个组 文件所有者以外的用户又可以分为文件所有者的同组用户和其他用户因此，Linux系统按文件所有者、文件所有者同组用户和其他用户来规定了不同的文件访问权限。12345scenery@scenery-PC:~$ ls / -l总用量 970072drwxr-xr-x 2 root root 4096 3月 1 18:48 bindrwxr-xr-x 3 root root 4096 3月 2 23:34 bootdrwxrwxr-x 2 root root 4096 3月 1 16:57 cdrom 在以上实例中，bin文件是一个目录文件，属主和属组都为root。属主有可读、可写、可执行的权限（rwx）；与属主同组的其他用户有可读和可执行的权限（r-x）；其他用户也有可读和可执行的权限（r-x）。 Linux 基础命令Linux中有许多常用命令，在学习文件操作之前，需要熟悉一些很基础的命令，这些命令在将来的使用中也是必须掌握的。 date 显示日期和时间 12scenery@scenery-PC:~$ date2019年 03月 14日 星期四 23:42:35 CST cal 显示日历 123456789scenery@scenery-PC:~$ cal 三月 2019 日 一 二 三 四 五 六 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 bc 简单计算器如需计算浮点数，需要在bc中执行scale = n 12345678scenery@scenery-PC:~$ bcbc 1.07.1Copyright 1991-1994, 1997, 1998, 2000, 2004, 2006, 2008, 2012-2017 Free Software Foundation, Inc.This is free software with ABSOLUTELY NO WARRANTY.For details type `warranty'. scale = 81/3.33333333 man 在线帮助命令 12345678910scenery@scenery-PC:~$ man dateDATE(1) User Commands DATE(1)NAME date - print or set the system date and timeSYNOPSIS date [OPTION]... [+FORMAT] date [-u|--utc|--universal] [MMDDhhmm[[CC]YY][.ss]]... man进入帮助文档后，用arrow key翻页，q键退出 sync 将内存中的数据写入磁盘 一般在关机前执行此命令，系统终端无提示 shutdown 关机 需要加入时间参数 如：shutdown now pwd 显示当前所在目录 12scenery@scenery-PC:~$ pwd/home/scenery ls 显示目录或文件用参数 -l 可以显示详细信息 1234567scenery@scenery-PC:~$ ls /bin -l总用量 12480-rwxr-xr-x 1 root root 1113504 4月 5 2018 bash-rwxr-xr-x 1 root root 748968 8月 29 2018 brltty-rwxr-xr-x 1 root root 34888 1月 30 2017 bunzip2-rwxr-xr-x 1 root root 2062296 1月 18 02:16 busybox... 重要的几个热键 [Tab] — 具有命令补全功能 [Ctrl]+c — 让当前的程序『停掉』 [Ctrl]+d — 通常代表着键盘输入结束（End Of File, EOF）另外，也可以用来取代exit clear 清空当前终端屏幕显示 文件属性操作 chgrp 更改文件属组语法：chgrp [-R] 属组名文件名参数选项-R：递归更改文件属组，就是在更改某个目录文件的属组时，如果加上-R的参数，那么该目录下的所有文件的属组都会更改。 12chgrp staff /u 将 /u 的属组更改为\"staff\"。chgrp -hR staff /u 将 /u 及其子目录下所有文件的属组更改为\"staff\"。 chown 更改文件属主，也可以同时更改文件属组语法：chown [–R] 属主名 文件名chown [-R] 属主名：属组名 文件名 进入 /root 目录（~）将install.log的拥有者改为bin这个账号： 1234567891011[root@www ~] cd ~[root@www ~]# chown bin install.log[root@www ~]# ls -l-rw-r--r-- 1 bin users 68495 Jun 25 08:53 install.log``` 将install.log的拥有者与群组改回为root：``` bash[root@www ~]# chown root:root install.log[root@www ~]# ls -l-rw-r--r-- 1 root root 68495 Jun 25 08:53 install.log chmod 更改文件9个属性 Linux文件属性有两种设置方法，一种是数字，一种是符号。Linux文件的基本权限就有九个，分别是owner/group/others三种身份各有自己的read/write/execute权限。 我们可以使用数字来代表各个权限，各权限的分数对照表如下： r:4 w:2 x:1 每种身份(owner/group/others)各自的三个权限(r/w/x)分数是需要累加的.例如当权限为： [-rwxrwx—] 分数则是：owner = rwx = 4+2+1 = 7group = rwx = 4+2+1 = 7others= — = 0+0+0 = 0 所以等一下我们设定权限的变更时，该文件的权限数字就是770啦！变更权限的指令chmod的语法是这样的： chmod [-R] xyz 文件或目录选项与参数：xyz : 就是刚刚提到的数字类型的权限属性，为 rwx 属性数值的相加。-R : 进行递归(recursive)的持续变更，亦即连同此目录下的所有文件都会变更 如果要将.bashrc这个文件所有的权限都设定启用，那么命令如下： 12345[root@www ~]# ls -al .bashrc-rw-r--r-- 1 root root 395 Jul 4 11:45 .bashrc[root@www ~]# chmod 777 .bashrc[root@www ~]# ls -al .bashrc-rwxrwxrwx 1 root root 395 Jul 4 11:45 .bashrc 用符号类型改变文件权限|chmod|身份|变更|权限|文件/目录||:-:|:-:|:-:|:-:|:-:||chmod|user group other all |+ - = |r w x |test.log|举例：chmod u=rwx,g=rx,o=r 123456&gt; [root@www ~]# ls -al .bashrc&gt; -rwxr-xr-x 1 root root 395 Jul 4 11:45 .bashrc&gt; [root@www ~]# chmod a+w .bashrc&gt; [root@www ~]# ls -al .bashrc&gt; -rwxrwxrwx 1 root root 395 Jul 4 11:45 .bashrc&gt;","tags":[{"name":"入门教程","slug":"入门教程","permalink":"http://WangLiangsen.github.io/tags/入门教程/"},{"name":"Linux","slug":"Linux","permalink":"http://WangLiangsen.github.io/tags/Linux/"}]},{"title":"Linux入门教程01","date":"2019-03-01T17:11:03.000Z","path":"2019/03/02/Linux入门教程01/","text":"什么是LinuxLinux是一套免费使用和自由传播的类Unix操作系统，是一个基于POSIX和UNIX的多用户、多任务、支持多线程和多CPU的操作系统。它能运行主要的UNIX工具软件、应用程序和网络协议。它支持32位和64位硬件。Linux继承了Unix以网络为核心的设计思想，是一个性能稳定的多用户网络操作系统。 简言之，Linux是一种操作系统（Windows / MAC OS / Unix / Linux）Linux有很多发行版，Linux仅是指操作系统的内核 常见的Linux发行版 UBUNTU 追求稳定的官方支持，对系统稳定性要求较弱，喜欢最新应用，相对来说不太喜欢折腾的开发者。 Debian，相对UBUNTU难很多的发行版，突出特点是稳定与容易使用的包管理系统，缺点是企业支持不足，为社区开发驱动。 CentOS，社区维护的RedHat的复刻版本，完全使用RedHat的源码重新编译生成，与RedHat的兼容性在理论上来说是最好的。如果你专注于Linux服务器，如网络管理，架站，那么CentOS是你的选择。 Linux的特点 Linux是一个命令行组成的操作系统，精髓在命令行，Linux命令许多强大的功能：从简单的磁盘操作、文件存取、到进行复杂的多媒体图象和流媒体文件的制作都离不开命令行 源码的开放化Linux操作系统是免费的，并且开发人员可以自由获取使用Linux源代码 良好的安全性及稳定性Linux的内核继承了Unix系统的稳定、高效的特性同时Linux采取了如对读、写控制、审计跟踪、核心授权等多种安全技术，保障用户开发环境的安全。 广泛的硬件平台支持Linux可以在多种硬件平台上进行运行，如在带有x86、680x0、SPARC、Alpha等大多数主流的处理器平台均可以运行。 Linux安装 下载镜像 ubuntu https://www.ubuntu.com/download/desktopcentos https://www.centos.org/download/ VMWare workstation 安装虚拟机步骤略过（可自行百度） 也可以在废弃电脑上实体安装 Linux的系统启动过程Linux系统的启动过程可以分为5个阶段： 内核的引导 运行init 系统初始化 建立终端 用户登录系统这些阶段是依次执行的内核引导当计算机打开电源后，首先是BIOS开机自检，按照BIOS中设置的启动设备来启动。操作系统接管硬件以后，首先读入 /boot 目录下的内核文件 init进程init 进程是系统所有进程的起点，你可以把它比拟成系统所有进程的老祖宗。init 程序首先是需要读取配置文件 /etc/inittab 许多程序需要开机启动。它们在Windows叫做”服务”（service），在Linux就叫做”守护进程”（daemon）。init进程的一大任务，就是去运行这些开机启动的程序。但是，不同的场合需要启动不同的程序，比如用作服务器时，需要启动Apache，用作桌面就不需要Linux允许为不同的场合，分配不同的开机启动程序，这就叫做”运行级别“（runlevel）。也就是说，启动时根据”运行级别”，确定要运行哪些程序。 Linux系统有7个运行级别(runlevel): 运行级别0：系统停机状态，系统默认运行级别不能设为0，否则不能正常启动运行级别1：单用户工作状态，root权限，用于系统维护，禁止远程登陆运行级别2：多用户状态(没有NFS)运行级别3：完全的多用户状态(有NFS)，登陆后进入控制台命令行模式运行级别4：系统未使用，保留运行级别5：X11控制台，登陆后进入图形GUI模式运行级别6：系统正常关闭并重启，默认运行级别不能设为6，否则不能正常启动 系统初始化在init的配置文件中有这么一行： si::sysinit:/etc/rc.d/rc.sysinit它调用执行了/etc/rc.d/rc.sysinit，而rc.sysinit是一个脚本，它主要是完成一些系统初始化的工作，rc.sysinit是每一个运行级别都要首先运行的重要脚本它主要完成的工作有：激活交换分区，检查磁盘，加载硬件模块以及其它一些需要优先执行任务 建立终端rc执行完毕后，返回init.这时基本系统环境已经设置好了，各种守护进程也已经启动了。init接下来会打开6个终端，以便用户登录系统。在inittab中的以下6行就是定义了6个终端：1234561:2345:respawn:/sbin/mingetty tty12:2345:respawn:/sbin/mingetty tty23:2345:respawn:/sbin/mingetty tty34:2345:respawn:/sbin/mingetty tty45:2345:respawn:/sbin/mingetty tty56:2345:respawn:/sbin/mingetty tty6 在2、3、4、5的运行级别中都将以respawn方式运行mingetty程序，mingetty程序能打开终端、设置模式。同时它会显示一个文本登录界面，在这个登录界面中会提示用户输入用户名，而用户输入的用户将作为参数传给login程序来验证用户的身份。 用户登录系统一般来说，用户的登录方式有三种： （1）命令行登录 （2）ssh登录 （3）图形界面登录 对于运行级别为5的图形方式用户来说，他们的登录是通过一个图形化的登录界面。登录成功后可以直接进入KDE、Gnome等窗口管理器。对于文本登录，当我们看到mingetty的登录界面时，我们就可以输入用户名和密码来登录系统了。Linux的账号验证程序是login，login会接收mingetty传来的用户名作为用户名参数。然后login会对用户名进行分析：如果用户名不是root，且存在/etc/nologin文件，login将输出nologin文件的内容，然后退出。在分析完用户名后，login将搜索/etc/passwd以及/etc/shadow来验证密码以及设置账户的其它信息。 图形模式与文字模式的切换方式Linux预设提供了六个命令窗口终端机让我们来登录。 默认我们登录的就是第一个窗口，也就是tty1，这个六个窗口分别为tty1,tty2 … tty6你可以按下Ctrl + Alt + F1 ~ F6 来切换它们。 如果你用的vmware 虚拟机，命令窗口切换的快捷键为 Alt + Space + F1~F6.如果你在图形界面下请按Alt + Shift + Ctrl + F1~F6 切换至命令窗口 Linux关机在linux领域内大多用在服务器上，很少遇到关机的操作正确的关机流程为：sync &gt; shutdown &gt; reboot &gt; halt 操作 含义 shutdown –h 10 ‘This server will shutdown after 10 mins’ 这个命令告诉大家，计算机将在10分钟后关机，并且会显示在登陆用户的当前屏幕中 Shutdown –h now 立马关机 Shutdown –h 20:25 系统会在今天20:25关机 Shutdown –h +10 十分钟后关机 Shutdown –r now 系统立马重启 Shutdown –r +10 系统十分钟后重启 reboot 就是重启，等同于 shutdown –r now halt 关闭系统，等同于shutdown –h now 和 poweroff 不管是重启系统还是关闭系统，首先要运行sync命令，把内存中的数据写到磁盘中 关机命令也可以用 init 0 , 重启系统命令也可以用init 6. Linux 系统目录结构登录系统后，在当前命令窗口下输入命令：1ls / 可以查看Linux的目录结构以下是对这些目录的解释： /bin：bin是Binary的缩写, 这个目录存放着最经常使用的命令。 /boot：这里存放的是启动Linux时使用的一些核心文件 /dev ：dev是Device(设备)的缩写, 该目录下存放的是Linux的外部设备 在Linux中设备=文件 /etc：这个目录用来存放所有的系统管理所需要的配置文件和子目录 /home：用户的主目录，在Linux中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名 /lib：这个目录里存放着系统最基本的动态连接共享库，其作用类似于Windows里的DLL文件。几乎所有的应用程序都需要用到这些共享库 /lost+found：这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件 /media linux系统会自动识别一些设备，例如U盘、光驱等等，当识别后，linux会把识别的设备挂载到这个目录下 /mnt：系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在/mnt/上，然后进入该目录就可以查看光驱里的内容了。 /opt：这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。 /proc：这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。 这个目录的内容不在硬盘上而是在内存里 /root：该目录为系统管理员，也称作超级权限者的用户主目录 /sbin：s就是Super User的意思，这里存放的是系统管理员使用的系统管理程序 /srv：该目录存放一些服务启动之后需要提取的数据。 /sys：这是linux2.6内核的一个很大的变化。该目录下安装了2.6内核中新出现的一个文件系统 sysfs 。 sysfs文件系统集成了下面3种文件系统的信息：针对进程信息的proc文件系统、针对设备的devfs文件系统以及针对伪终端的devpts文件系统。该文件系统是内核设备树的一个直观反映。 /tmp：这个目录是用来存放一些临时文件的 /usr：这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似与windows下的program files目录 /usr/bin：系统用户使用的应用程序 /usr/sbin：超级用户使用的比较高级的管理程序和系统守护程序 /usr/src：内核源代码默认的放置目录 /var：这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下,包括各种日志文件。","tags":[{"name":"入门教程","slug":"入门教程","permalink":"http://WangLiangsen.github.io/tags/入门教程/"},{"name":"Linux","slug":"Linux","permalink":"http://WangLiangsen.github.io/tags/Linux/"}]},{"title":"5分钟入门MARKDOWN","date":"2019-01-17T16:18:59.000Z","path":"2019/01/18/markdown语法入门/","text":"什么是Markdown？Markdwon 是一种轻量级标记语言，由Aaron Swartz和John Gruber共同设计。它以纯文本形式（易读、易写、易更改）编写文档，并最终以HTLM格式发布。Markdown也可以理解为将以Markdown语法编写的语言转换成HTML内容的工具。 Aaron Swartz的传奇一生 14岁参与RSS 1.0规格标准制订。 2004年入读斯坦福大学，之后退学。 2005年创建 Infogami,之后与Reddit合并成为其合伙人。 2010年创立示进会（Demand Preogress）,积极参与禁止网络盗版法案（SOPA）活动，最终该提案被撤回。 2011年7月19日,因被控从MIT和JSTOR下载480万篇学术论文并以免费形式上传于网络被捕。 2013年1月自杀身亡。 Tips注意：Markdown使用 # + * &gt; _ 等符号来标记，符号后面必须跟上至少1个空格才会被语法识别。 Markdown语法标题Markdown的标题用’# ‘标记在想要作为标题的文字开头加上1~6个#，依次表示一级到六级标题举例：# 一级标题## 二级标题### 三级标题 为了避免文字TOC出现混乱，本例不做输出演示。 换行在行尾添加两个空格（spacebar）加一个回车（enter）表示换行： 列表列表分为 无序列表 和 有序列表 无序列表用 - + * 作为打头标记举例：+ 项目1+ 项目2+ 项目3输出： 项目1 项目2 项目3 有序列表有序列表则使用数字加英文句点.来表示举例:1. 第一项2. 第二项3. 第三项输出： 第一项 第二项 第三项 引用引用以 &gt; 来表示，引用中又支持多级引用、标题、列表、代码块、分割线等常规语法。（也就是说：引用里面可以加标题，列表，嵌套引用等等。）举例：> 引用自百度文库>&gt; 引用自网易云音乐输出： 引用自百度文库 引用自网易云音乐 文字样式（字体）*斜体文本* **加粗文本** *斜粗体文本* \\删除文本 ` 底纹 ` &lt; sub&gt;下标文字&lt; /sub&gt; &lt; sup&gt;上标文字&lt; /sup&gt; &lt; u&gt;下划线文本&lt; /u&gt; 输出： 斜体文本 加粗文本 斜粗体文本 删除文本 底纹 下标文字 正常文字 上标文字 正常文字 下划线文本 图片与链接链接链接的形式: 内联 和 引用。这两种形式下链接文本的定界符都是 [中括号].要创建内联链接, 只需在链接文本的右括号后面紧接一对圆括号. 圆括号里面放所需的 URL 链接, 还可以放一个 可选 的链接标题, 标题要用引号包围. 自动链接：直接使用\\&lt; &gt;括起来 &lt;yourlink.xyz&gt; 链接： [ ]( ) [链接描述](链接的地址) 举例： This is [an example](http://example.com/ “Title”) inline link. This is an example \\http://example.com 输出： This is an example inline link. This is an example http://example.com 图片Markdown 使用了类似链接的语法来插入图片在链接的语法前面加一个感叹号: !也就是: 图片：![Alt text] (/path/to/img.jpg “Optional title”) 由于没有本地路径，此例子不做举例输出演示。 代码和代码块代码行引用的代码只有一行，可以用 ` 号将语句包起来。举例： `cout &lt;&lt; “Hello world” //this is an example of C++ outputing hello word` 输出： cout &lt;&lt; &quot;Hello world&quot; //this is an example of C++ outputing hello word 代码块（段）用一对\\将代码括起来，在第一个\\`\\`\\`之后，空格输入语言名称即可高亮代码。 1234567格式如下：\\``` [语言]这里是代码​\\ 举例： ``` C++ #includeint main(){ using namespace std; int x = 1; x = x++; //x = x + 1 cout &lt;&lt; x; return 0;} ``` 输出： 123456789#include&lt;iostream&gt;int main()&#123; using namespace std; int x = 1; x = x++; //x = x + 1 cout &lt;&lt; x; return 0;&#125; 分割线在一行中使用三个或三个以上的 * 可以添加分隔线，中间可以插入空格，但是不能有其他字符。 举例： *** 输出： 高级应用表格表格用竖线|分割不同列，用以下标记设置对齐方式 (ATTENTION！必须) ：居左:—- 居中:—-: 居右—-: 举例： |标题1|标题2|标题3| |:—|:—:|—:| |居左文本|居中文本|居右文本| 输出： 标题1 标题2 标题3 居左文本 居中文本 居右文本 脚注使用[^number ]来定义脚注 举例： 这是一个脚注的例子[^ 1] [^1 ]: 这里是脚注 输出： 这是一个脚注的例子[^1] 常用弥补Markdown的Html标签字体大小和颜色\\&lt; font face=”微软雅黑” color=”red” size=”6”&gt;字体及字体颜色和大小\\&lt; /font&gt;\\&lt; font color=”#0000ff”&gt;字体颜色&lt;/ font&gt; 字体及字体颜色和大小字体颜色 文本对齐方式&lt; p align=”left”&gt;居左文本&lt; /p&gt;&lt; p align=”center”&gt;居中文本&lt; /p&gt;&lt; p align=”right”&gt;居右文本&lt; /p&gt; 居左文本居中文本居右文本 任务列表任务列表支持Markdown的字体格式，支持链接，支持有序和无序列表。用- [ ]表示未完成用- [x]表示完成 举例： - [ ] links, formatting, and tags supported- [x] list syntax required (any unordered or ordered list supported)- [ ] this is a complete item- [x] this is an incomplete item 输出： links, formatting, and tags supported list syntax required (any unordered or ordered list supported) this is a complete item this is an incomplete item 转义字符转义字符就是想显示出Markdown语法内的标记字符，比如* _ - + 等。这篇教程在举例部分，为了显示语法就用了很多转义字符。 转义字符用 \\ 作为符号的前缀 在Visual Studio Code中编辑Markdown在扩展中心（ctrl+shift+x）安装Markdown all in one插件就能很方便的编辑和预览Markdown文件。快捷键如下： Key Command Ctrl + B 加粗 Ctrl + I 斜体 Alt + S 删除线 Ctrl + Shift + ] 标题 从一级到六级递增 Ctrl + Shift + [ 标题 从当前级到一级递减 Ctrl + M 数学公式环境 Alt + C Check/Uncheck task list item Ctrl + Shift + V Markdown预览 Ctrl + K V Toggle preview to side 参考文档本教程参考的文档如下： https://markdown-zh.readthedocs.io/en/latest/http://www.cycygogo.cn/2017/12/05/Markdown-Syntax/https://www.jianshu.com/p/ccfd81fe77d2 后记 此Markdown教程尽可能简单的讲解了Markdown的语法，在字体及列表中，除了*仍有很多其他标识符可以使用。本文只介绍了其中一种。 除了入门Markdown，本文也可留作日后语法备查。","tags":[{"name":"入门教程","slug":"入门教程","permalink":"http://WangLiangsen.github.io/tags/入门教程/"},{"name":"Markdown","slug":"Markdown","permalink":"http://WangLiangsen.github.io/tags/Markdown/"}]},{"title":"C++入门教程01","date":"2019-01-05T07:10:02.000Z","path":"2019/01/05/C++学习笔记01/","text":"开始学习C++关于C++的源文件C++的源代码(Source Code)文件扩展名为.C 或者.cpp Windows上的编译器Compile 对打开文件中的代码进行编译 Build 和 Make 编译项目中所有源代码文件，如果只有一个被修改则只编译一个 Build All 重新编译所有源代码文件的代码 Link 组合源代码和库代码 Run 或 Execute 运行程序（自动完成上述步骤） Debug/Release 以步进方式运行程序 Debug 中带有调试信息，程序较大，执行较慢 在Visual Studio上运行程序时，通常要加入cin.get(); 或者两句cin.get(); cin.get(); 目的是防止程序输出窗口一闪而过 Tips 可以对示例程序使用同一个项目，只在项目里增删源文件，可以节省空间和工作量 改正错误时应该首先改正第一个错误；如果在标识行上找不到错误，往往在上一行 C++基础语法 C++用 ; (分号)来区分语句结尾。 // 表示注释 也可以用/ / #include 表示预处理编译指令，如： #include&lt;iostream&gt; int main() 表示主函数头。 using namespace 表示使用什么名字空间，如：using namespace std; { }表示函数体，在花括号之间。 int型的main函数需要 return 一个整形的数作为返回值，通常为return 0; cin 和 coutcin 和 cout 在名字空间std内，分别用来输入和输出变量值/字符串 cin_ _用来输入字符。cin &gt;&gt; number 表示信息从cin流向number变量。 cout &lt;&lt; “a = ”&lt;&lt; a &lt;&lt; endl; 表示字符串和变量值流向cout。 输出为a=1(换行) 如果没有using namespace std; 就需要std::cout 或 using std::cout; 声明、赋值以及函数的概念声明语句int number = 8；//声明整形变量number同时初始化为8 C++通常在首次使用变量前才做声明；而C则是在函数体的开始部位声明所需变量。 赋值语句number = 25;_ //把25赋值给number变量。_ 如果出现传递等号的赋值，如a = b = c = 1; 是从右向左依次赋值 函数的概念 x = sqrt(6.25);_ //变量 &lt;&lt;函数返回值 = 函数名（参数列表）_ 有些函数不只一个参数，有些函数没有参数甚至没有返回值。 使用库函数前要包含相应库文件，如：#include&lt;cmath&gt; 使用用户自定义函数前要对函数原型进行声明，如：int func(int)； Main()函数的返回值传递给操作系统，也叫退出值。通常0表示程序运行成功，非零则表示存在问题。","tags":[{"name":"C++","slug":"C","permalink":"http://WangLiangsen.github.io/tags/C/"},{"name":"入门教程","slug":"入门教程","permalink":"http://WangLiangsen.github.io/tags/入门教程/"}]}]